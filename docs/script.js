// ========================================
// üéÆ DURAK MINI APP - GAME LOGIC
// ========================================

// Donald Trump quotes - loaded via script tags

// Durak Mini App: 1v1 + targeted defense selection

// ========================================
// üì± TELEGRAM MINI APP INTEGRATION
// ========================================

// Initialize Telegram WebApp
let tg = null;
let isTelegram = false;

// Check if running in Telegram
if (typeof window !== 'undefined' && window.Telegram && window.Telegram.WebApp) {
  tg = window.Telegram.WebApp;
  isTelegram = true;
  
  // Configure Telegram WebApp
  tg.ready();
  tg.expand();
  
  // Set theme colors
  tg.setHeaderColor('#1a1a2e');
  tg.setBackgroundColor('#0a0a0a');
  
  // Enable closing confirmation
  tg.enableClosingConfirmation();
  
  console.log('üéÆ Telegram Mini App initialized');
  console.log('üë§ User:', tg.initDataUnsafe?.user);
  console.log('üåç Language:', tg.initDataUnsafe?.user?.language_code);
} else {
  console.log('üåê Running in browser mode');
}

const SUITS = ["‚ô£","‚ô¶","‚ô•","‚ô†"];
const RANKS = ["6","7","8","9","10","J","Q","K","A"];
const RANK_VALUE = Object.fromEntries(RANKS.map((r,i)=>[r,i]));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebP —Ñ–æ—Ä–º–∞—Ç–∞
const supportsWebP = (() => {
  const canvas = document.createElement('canvas');
  canvas.width = 1;
  canvas.height = 1;
  const result = canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;
  console.log(`üñºÔ∏è WebP support detected: ${result}`);
  return result;
})();

function createDeck36(){
  const deck=[];
  for (const s of SUITS) for (const r of RANKS) deck.push({suit:s, rank:r, id:`${s}-${r}`});
  return deck;
}
function shuffle(a){ for(let i=a.length-1;i>0;i--){ const j=(Math.random()*(i+1))|0; [a[i],a[j]]=[a[j],a[i]] } return a; }
function beats(defCard, attCard, trumpSuit){
  console.log(`üîç === BEATS FUNCTION DEBUG ===`);
  console.log(`üîç beats() called: defCard=${text(defCard)}, attCard=${text(attCard)}, trumpSuit=${trumpSuit}`);
  console.log(`üîç beats() state.trumpSuit=${state.trumpSuit}, passed trumpSuit=${trumpSuit}`);
  console.log(`üîç beats() trumpSuit === state.trumpSuit? ${trumpSuit === state.trumpSuit}`);
  console.log(`üîç beats() state.trumpCard=`, state.trumpCard);
  console.log(`üîç beats() state.trumpSuit=`, state.trumpSuit);
  console.log(`üîç beats() trumpSuit passed=`, trumpSuit);
  console.log(`üîç beats() trumpSuit === state.trumpSuit? ${trumpSuit === state.trumpSuit}`);
  console.log(`üîç === END BEATS FUNCTION DEBUG ===`);
  
  if (defCard.suit === attCard.suit) return RANK_VALUE[defCard.rank] > RANK_VALUE[attCard.rank];
  if (defCard.suit !== attCard.suit && defCard.suit === trumpSuit) return attCard.suit !== trumpSuit;
  return false;
}
function text(card){ return `${card.rank}${card.suit}`; }
function cardImagePath(card){
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–∞—Ä—Ç–µ
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: WebP -> SVG (fallback)

  // –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –ú–ê–ü–ü–ò–ù–ì –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º (—Ç–µ–ø–µ—Ä—å –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç casino —Ñ–æ—Ä–º–∞—Ç)
  const suitMap = { '‚ô£':'clubs', '‚ô¶':'diamonds', '‚ô•':'hearts', '‚ô†':'spades' };
  const rankMap = { 'J':'jack', 'Q':'queen', 'K':'king', 'A':'ace' };
  const suit = suitMap[card.suit];
  let rank = card.rank;
  if (rankMap[rank]) rank = rankMap[rank];
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –º–∞—Å—Ç–µ–π
  console.log(`üîç === CARD IMAGE PATH DEBUG ===`);
  console.log(`üîç Original card: ${text(card)}`);
  console.log(`üîç Original suit: ${card.suit}`);
  console.log(`üîç Mapped suit: ${suit}`);
  console.log(`üîç Original rank: ${card.rank}`);
  console.log(`üîç Mapped rank: ${rank}`);
  console.log(`üîç Suit mapping: ${card.suit} -> ${suit}`);
  console.log(`üîç === END CARD IMAGE PATH DEBUG ===`);
  
  console.log(`üÉè cardImagePath: card=${text(card)}, theme=${state.theme}, supportsWebP=${supportsWebP}`);

  // –ï—Å–ª–∏ WebP –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º WebP –∫–∞—Ä—Ç—ã (—Ç–µ–ø–µ—Ä—å –≤—Å–µ —Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç casino —Ñ–æ—Ä–º–∞—Ç)
  if (supportsWebP) {
    const webpPath = `./themes/${state.theme}/cards/WEBP_cards/${rank}_of_${suit}.webp`;
    console.log(`üñºÔ∏è Loading WebP card: ${webpPath}`);
    return webpPath;
  }

  // Fallback –Ω–∞ SVG –∫–∞—Ä—Ç—ã
  const cardSetPaths = {
    'classic': 'SVG-cards-1.3',
    'modern': 'SVG-cards-1.3',
    'vintage': 'SVG-cards-1.3', 
    'minimal': 'SVG-cards-1.3',
    'luxury': 'SVG-cards-1.3'
  };
  
  const cardSetPath = cardSetPaths[state.cardSet] || cardSetPaths['classic'];
  const svgPath = `./themes/${state.theme}/cards/${cardSetPath}/${String(rank).toLowerCase()}_of_${suit}.svg`;
  console.log(`üñºÔ∏è Loading SVG card: ${svgPath}`);
  return svgPath;
}

// ========================================
// üèÜ ACHIEVEMENTS SYSTEM
// ========================================

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const ACHIEVEMENTS = {
  // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  first_game: {
    id: 'first_game',
    name: '–ù–æ–≤–∏—á–æ–∫',
    description: '–°—ã–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
    icon: 'üéÆ',
    category: 'basic',
    rarity: 'bronze',
    points: 10,
    condition: (stats) => stats.totalGames >= 1
  },
  
  first_win: {
    id: 'first_win',
    name: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
    description: '–í—ã–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
    icon: 'üèÜ',
    category: 'basic',
    rarity: 'bronze',
    points: 20,
    condition: (stats) => stats.wins >= 1
  },
  
  first_loss: {
    id: 'first_loss',
    name: '–ü–µ—Ä–≤–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ',
    description: '–ü—Ä–æ–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
    icon: 'üòÖ',
    category: 'basic',
    rarity: 'bronze',
    points: 5,
    condition: (stats) => stats.losses >= 1
  },
  
  // –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥
  streak_3: {
    id: 'streak_3',
    name: '–ì–æ—Ä—è—á–∞—è —Ä—É–∫–∞',
    description: '–í—ã–∏–≥—Ä–∞—Ç—å 3 –∏–≥—Ä—ã –ø–æ–¥—Ä—è–¥',
    icon: 'üî•',
    category: 'streaks',
    rarity: 'silver',
    points: 50,
    condition: (stats) => stats.bestStreak >= 3
  },
  
  streak_5: {
    id: 'streak_5',
    name: '–ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π',
    description: '–í—ã–∏–≥—Ä–∞—Ç—å 5 –∏–≥—Ä –ø–æ–¥—Ä—è–¥',
    icon: '‚ö°',
    category: 'streaks',
    rarity: 'silver',
    points: 100,
    condition: (stats) => stats.bestStreak >= 5
  },
  
  streak_10: {
    id: 'streak_10',
    name: '–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
    description: '–í—ã–∏–≥—Ä–∞—Ç—å 10 –∏–≥—Ä –ø–æ–¥—Ä—è–¥',
    icon: 'üëë',
    category: 'streaks',
    rarity: 'gold',
    points: 200,
    condition: (stats) => stats.bestStreak >= 10
  },
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å
  games_10: {
    id: 'games_10',
    name: '–ò–≥—Ä–æ–∫',
    description: '–°—ã–≥—Ä–∞—Ç—å 10 –∏–≥—Ä',
    icon: 'üéØ',
    category: 'progress',
    rarity: 'bronze',
    points: 30,
    condition: (stats) => stats.totalGames >= 10
  },
  
  games_25: {
    id: 'games_25',
    name: '–û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫',
    description: '–°—ã–≥—Ä–∞—Ç—å 25 –∏–≥—Ä',
    icon: 'üé≤',
    category: 'progress',
    rarity: 'silver',
    points: 75,
    condition: (stats) => stats.totalGames >= 25
  },
  
  games_50: {
    id: 'games_50',
    name: '–í–µ—Ç–µ—Ä–∞–Ω',
    description: '–°—ã–≥—Ä–∞—Ç—å 50 –∏–≥—Ä',
    icon: 'üõ°Ô∏è',
    category: 'progress',
    rarity: 'gold',
    points: 150,
    condition: (stats) => stats.totalGames >= 50
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ
  win_rate_60: {
    id: 'win_rate_60',
    name: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
    description: '–ò–º–µ—Ç—å 60%+ –ø–æ–±–µ–¥ –ø—Ä–∏ 20+ –∏–≥—Ä–∞—Ö',
    icon: 'üìä',
    category: 'stats',
    rarity: 'silver',
    points: 100,
    condition: (stats) => stats.totalGames >= 20 && (stats.wins / stats.totalGames) >= 0.6
  },
  
  win_rate_70: {
    id: 'win_rate_70',
    name: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
    description: '–ò–º–µ—Ç—å 70%+ –ø–æ–±–µ–¥ –ø—Ä–∏ 30+ –∏–≥—Ä–∞—Ö',
    icon: 'üéØ',
    category: 'stats',
    rarity: 'gold',
    points: 200,
    condition: (stats) => stats.totalGames >= 30 && (stats.wins / stats.totalGames) >= 0.7
  },
  
  // –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
  casino_master: {
    id: 'casino_master',
    name: '–ö—Ä—É–ø—å–µ',
    description: '–í—ã–∏–≥—Ä–∞—Ç—å 5 –∏–≥—Ä –≤ —Ç–µ–º–µ "–ö–∞–∑–∏–Ω–æ"',
    icon: 'üé∞',
    category: 'thematic',
    rarity: 'silver',
    points: 75,
    condition: (stats) => stats.detailed.gamesByTheme.casino >= 5
  },
  
  basement_master: {
    id: 'basement_master',
    name: '–ü–æ–¥–ø–æ–ª—å—â–∏–∫',
    description: '–í—ã–∏–≥—Ä–∞—Ç—å 5 –∏–≥—Ä –≤ —Ç–µ–º–µ "–ó–µ–º–ª—è–Ω–∫–∞"',
    icon: 'üï≥Ô∏è',
    category: 'thematic',
    rarity: 'silver',
    points: 75,
    condition: (stats) => stats.detailed.gamesByTheme.basement >= 5
  },
  
  tavern_master: {
    id: 'tavern_master',
    name: '–ó–∞–≤—Å–µ–≥–¥–∞—Ç–∞–π',
    description: '–í—ã–∏–≥—Ä–∞—Ç—å 5 –∏–≥—Ä –≤ —Ç–µ–º–µ "–¢–∞–≤–µ—Ä–Ω–∞"',
    icon: 'üç∫',
    category: 'thematic',
    rarity: 'silver',
    points: 75,
    condition: (stats) => stats.detailed.gamesByTheme.tavern >= 5
  },
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ
  morning_player: {
    id: 'morning_player',
    name: '–£—Ç—Ä–µ–Ω–Ω–∏–π –∏–≥—Ä–æ–∫',
    description: '–°—ã–≥—Ä–∞—Ç—å –∏–≥—Ä—É —É—Ç—Ä–æ–º (6:00-12:00)',
    icon: 'üåÖ',
    category: 'time',
    rarity: 'bronze',
    points: 25,
    condition: (stats) => stats.detailed.gamesByTime.morning >= 1
  },
  
  night_owl: {
    id: 'night_owl',
    name: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞',
    description: '–°—ã–≥—Ä–∞—Ç—å –∏–≥—Ä—É –Ω–æ—á—å—é (22:00-6:00)',
    icon: 'ü¶â',
    category: 'time',
    rarity: 'bronze',
    points: 25,
    condition: (stats) => stats.detailed.gamesByTime.night >= 1
  }
};

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
class AchievementSystem {
  static checkAchievements(stats) {
    const newAchievements = [];
    
    Object.values(ACHIEVEMENTS).forEach(achievement => {
      if (!stats.achievements.unlocked.includes(achievement.id)) {
        if (achievement.condition(stats)) {
          newAchievements.push(achievement);
          stats.achievements.unlocked.push(achievement.id);
          stats.achievements.points += achievement.points;
          console.log(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name} (+${achievement.points} –æ—á–∫–æ–≤)`);
        }
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –∑–≤–∞–Ω–∏–µ
    this.updateLevelAndTitle(stats);
    
    return newAchievements;
  }
  
  static updateLevelAndTitle(stats) {
    const points = stats.achievements.points;
    
    if (points >= 1000) {
      stats.achievements.level = 5;
      stats.achievements.title = "–õ–µ–≥–µ–Ω–¥–∞";
    } else if (points >= 500) {
      stats.achievements.level = 4;
      stats.achievements.title = "–ú–∞—Å—Ç–µ—Ä";
    } else if (points >= 200) {
      stats.achievements.level = 3;
      stats.achievements.title = "–û–ø—ã—Ç–Ω—ã–π";
    } else if (points >= 50) {
      stats.achievements.level = 2;
      stats.achievements.title = "–ò–≥—Ä–æ–∫";
    } else {
      stats.achievements.level = 1;
      stats.achievements.title = "–ù–æ–≤–∏—á–æ–∫";
    }
  }
}

// ========================================
// üìä STATISTICS SYSTEM
// ========================================

// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
const StatsAPI = {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Cloud Storage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  
  async loadStats() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Cloud Storage
    if (window.Telegram?.WebApp?.CloudStorage) {
      try {
        return await this.loadFromTelegramCloud();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Telegram Cloud, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error);
      return this.loadFromLocalStorage();
    }
    }
    
    // Fallback –Ω–∞ localStorage –µ—Å–ª–∏ –Ω–µ –≤ Telegram
    console.log('üì± Telegram Cloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
    return this.loadFromLocalStorage();
  },
  
  async saveStats(stats) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Cloud Storage
    if (window.Telegram?.WebApp?.CloudStorage) {
      try {
        await this.saveToTelegramCloud(stats);
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Telegram Cloud');
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ backup
        this.saveToLocalStorage(stats);
        return true;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Telegram Cloud, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error);
      return this.saveToLocalStorage(stats);
      }
    }
    
    // Fallback –Ω–∞ localStorage –µ—Å–ª–∏ –Ω–µ –≤ Telegram
    console.log('üì± Telegram Cloud –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage');
    return this.saveToLocalStorage(stats);
  },
  
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Cloud Storage
  async loadFromTelegramCloud() {
    return new Promise((resolve, reject) => {
      const keys = [
        'totalGames', 'wins', 'losses', 'currentStreak', 'bestStreak', 'lastResult',
        'achievements', 'detailed'
      ];
      
      window.Telegram.WebApp.CloudStorage.getItems(keys, (error, result) => {
        if (error) {
          console.error('‚ùå Telegram Cloud getItems error:', error);
          reject(error);
          return;
        }
        
        console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–∑ Telegram Cloud:', result);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Cloud Storage
        const stats = {
          totalGames: parseInt(result.totalGames) || 0,
          wins: parseInt(result.wins) || 0,
          losses: parseInt(result.losses) || 0,
          currentStreak: parseInt(result.currentStreak) || 0,
          bestStreak: parseInt(result.bestStreak) || 0,
          lastResult: result.lastResult || null,
          // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
          achievements: result.achievements ? JSON.parse(result.achievements) : {
            unlocked: [],
            points: 0,
            level: 1,
            title: "–ù–æ–≤–∏—á–æ–∫"
          },
          // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          detailed: result.detailed ? JSON.parse(result.detailed) : {
            gamesByTheme: { casino: 0, basement: 0, tavern: 0 },
            gamesByTime: { morning: 0, afternoon: 0, evening: 0, night: 0 },
            specialWins: { noCards: 0, comeback: 0, blitz: 0 },
            cardsTaken: 0,
            cardsPlayed: 0,
            trumpCardsUsed: 0
          }
        };
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Telegram Cloud:', stats);
        resolve(stats);
      });
    });
  },
  
  async saveToTelegramCloud(stats) {
    return new Promise((resolve, reject) => {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Cloud Storage
      const data = {
        totalGames: String(stats.totalGames || 0),
        wins: String(stats.wins || 0),
        losses: String(stats.losses || 0),
        currentStreak: String(stats.currentStreak || 0),
        bestStreak: String(stats.bestStreak || 0),
        lastResult: String(stats.lastResult || ''),
        achievements: JSON.stringify(stats.achievements || {
          unlocked: [],
          points: 0,
          level: 1,
          title: "–ù–æ–≤–∏—á–æ–∫"
        }),
        detailed: JSON.stringify(stats.detailed || {
          gamesByTheme: { casino: 0, basement: 0, tavern: 0 },
          gamesByTime: { morning: 0, afternoon: 0, evening: 0, night: 0 },
          specialWins: { noCards: 0, comeback: 0, blitz: 0 },
          cardsTaken: 0,
          cardsPlayed: 0,
          trumpCardsUsed: 0
        })
      };
      
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Telegram Cloud:', data);
      
      window.Telegram.WebApp.CloudStorage.setItems(data, (error, success) => {
        if (error) {
          console.error('‚ùå Telegram Cloud setItems error:', error);
          reject(error);
          return;
        }
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Telegram Cloud');
        resolve(true);
      });
    });
  },
  
  loadFromLocalStorage() {
    try {
      const saved = localStorage.getItem('playerStats');
      if (saved) {
        const stats = JSON.parse(saved);
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ localStorage:', stats);
        return stats;
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return {
      totalGames: 0,
      wins: 0,
      losses: 0,
      currentStreak: 0,
      bestStreak: 0,
      lastResult: null,
      // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      achievements: {
        unlocked: [],
        points: 0,
        level: 1,
        title: "–ù–æ–≤–∏—á–æ–∫"
      },
      // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      detailed: {
        gamesByTheme: { casino: 0, basement: 0, tavern: 0 },
        gamesByTime: { morning: 0, afternoon: 0, evening: 0, night: 0 },
        specialWins: { noCards: 0, comeback: 0, blitz: 0 },
        cardsTaken: 0,
        cardsPlayed: 0,
        trumpCardsUsed: 0
      }
    };
  },
  
  saveToLocalStorage(stats) {
    try {
      localStorage.setItem('playerStats', JSON.stringify(stats));
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
      return true;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e);
      return false;
    }
  },
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ —Å–±—Ä–æ—Å–∞)
  async clearStats() {
    if (window.Telegram?.WebApp?.CloudStorage) {
      return new Promise((resolve, reject) => {
        const keys = ['totalGames', 'wins', 'losses', 'currentStreak', 'bestStreak', 'lastResult'];
        
        window.Telegram.WebApp.CloudStorage.removeItems(keys, (error, success) => {
          if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Telegram Cloud:', error);
            reject(error);
            return;
          }
          
          console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞ –≤ Telegram Cloud');
          localStorage.removeItem('playerStats');
          resolve(true);
        });
      });
    } else {
      localStorage.removeItem('playerStats');
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞ –≤ localStorage');
      return true;
    }
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
function updatePlayerStats(result, gameData = {}) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!state.playerStats.achievements) {
    state.playerStats.achievements = {
      unlocked: [],
      points: 0,
      level: 1,
      title: "–ù–æ–≤–∏—á–æ–∫"
    };
  }
  
  if (!state.playerStats.detailed) {
    state.playerStats.detailed = {
      gamesByTheme: { casino: 0, basement: 0, tavern: 0 },
      gamesByTime: { morning: 0, afternoon: 0, evening: 0, night: 0 },
      specialWins: { noCards: 0, comeback: 0, blitz: 0 },
      cardsTaken: 0,
      cardsPlayed: 0,
      trumpCardsUsed: 0
    };
  }
  
  // –ë–∞–∑–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  state.playerStats.totalGames++;
  
  if (result === 'win') {
    state.playerStats.wins++;
    if (state.playerStats.lastResult === 'win') {
      state.playerStats.currentStreak++;
    } else {
      state.playerStats.currentStreak = 1;
    }
    state.playerStats.bestStreak = Math.max(state.playerStats.bestStreak, state.playerStats.currentStreak);
  } else if (result === 'loss') {
    state.playerStats.losses++;
    state.playerStats.currentStreak = 0;
  }
  
  state.playerStats.lastResult = result;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  updateDetailedStats(result, gameData);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const newAchievements = AchievementSystem.checkAchievements(state.playerStats);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
  if (newAchievements.length > 0) {
    showAchievementNotification(newAchievements);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  StatsAPI.saveStats(state.playerStats);
  
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', state.playerStats);
  if (newAchievements.length > 0) {
    console.log('üèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', newAchievements.map(a => a.name));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateDetailedStats(result, gameData) {
  const stats = state.playerStats.detailed;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–µ–º–µ
  const currentTheme = state.theme;
  if (stats.gamesByTheme[currentTheme] !== undefined) {
    stats.gamesByTheme[currentTheme]++;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const hour = new Date().getHours();
  if (hour >= 6 && hour < 12) {
    stats.gamesByTime.morning++;
  } else if (hour >= 12 && hour < 18) {
    stats.gamesByTime.afternoon++;
  } else if (hour >= 18 && hour < 22) {
    stats.gamesByTime.evening++;
  } else {
    stats.gamesByTime.night++;
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–±–µ–¥—ã
  if (result === 'win') {
    if (gameData.cardsTaken === 0) {
      stats.specialWins.noCards++;
    }
    
    if (gameData.wasComeback) {
      stats.specialWins.comeback++;
    }
    
    if (gameData.gameDuration && gameData.gameDuration < 120000) { // 2 –º–∏–Ω—É—Ç—ã
      stats.specialWins.blitz++;
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
  if (gameData.cardsTaken !== undefined) {
    stats.cardsTaken += gameData.cardsTaken;
  }
  
  if (gameData.cardsPlayed !== undefined) {
    stats.cardsPlayed += gameData.cardsPlayed;
  }
  
  if (gameData.trumpCardsUsed !== undefined) {
    stats.trumpCardsUsed += gameData.trumpCardsUsed;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
function showAchievementNotification(achievements) {
  achievements.forEach((achievement, index) => {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    setTimeout(() => {
      const notification = document.createElement('div');
      notification.className = 'achievement-notification';
      notification.innerHTML = `
        <div class="achievement-content">
          <div class="achievement-icon">${achievement.icon}</div>
          <div class="achievement-text">
            <h3>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</h3>
            <h4>${achievement.name}</h4>
            <p>${achievement.description}</p>
            <div class="achievement-reward">+${achievement.points} –æ—á–∫–æ–≤</div>
          </div>
        </div>
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
        padding: 16px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 10000;
        transform: translateX(400px);
        transition: transform 0.3s ease;
        max-width: 300px;
        font-family: Arial, sans-serif;
      `;
      
      // –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const style = document.createElement('style');
      style.textContent = `
        .achievement-notification .achievement-content {
          display: flex;
          align-items: center;
          gap: 12px;
        }
        .achievement-notification .achievement-icon {
          font-size: 32px;
          flex-shrink: 0;
        }
        .achievement-notification .achievement-text h3 {
          margin: 0 0 4px 0;
          font-size: 14px;
          font-weight: bold;
        }
        .achievement-notification .achievement-text h4 {
          margin: 0 0 4px 0;
          font-size: 16px;
          font-weight: bold;
        }
        .achievement-notification .achievement-text p {
          margin: 0 0 8px 0;
          font-size: 12px;
          opacity: 0.9;
        }
        .achievement-notification .achievement-reward {
          background: rgba(255,255,255,0.2);
          padding: 4px 8px;
          border-radius: 6px;
          font-size: 12px;
          font-weight: bold;
          display: inline-block;
        }
      `;
      document.head.appendChild(style);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
      document.body.appendChild(notification);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
      setTimeout(() => {
        notification.style.transform = 'translateX(400px)';
        setTimeout(() => {
          notification.remove();
          style.remove();
        }, 300);
      }, 4000);
      
      // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      if (soundManager && soundManager.sounds && soundManager.sounds.cardOnTable) {
        soundManager.sounds.cardOnTable.play().catch(e => console.log('Achievement sound failed:', e));
      }
      
      console.log(`üéâ –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${achievement.name}`);
    }, index * 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  });
}

function loadPlayerStats() {
  StatsAPI.loadStats().then(stats => {
    state.playerStats = { ...state.playerStats, ...stats };
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', state.playerStats);
  });
}

function showAchievementsModal() {
  console.log('üèÜ showAchievementsModal called');
  const modal = document.getElementById('achievementsModal');
  console.log('üèÜ Modal element:', modal);
  
  if (!modal) {
    console.error('‚ùå achievementsModal not found!');
    return;
  }
  
  console.log('üèÜ Updating player level display...');
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
  updatePlayerLevelDisplay();
  
  console.log('üèÜ Rendering achievements...');
  // –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  renderAchievements();
  
  console.log('üèÜ Showing modal...');
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modal.style.display = 'flex';
  console.log('‚úÖ Modal should be visible now');
}

function updatePlayerLevelDisplay() {
  const achievements = state.playerStats.achievements || {
    level: 1,
    title: "–ù–æ–≤–∏—á–æ–∫",
    points: 0
  };
  
  document.getElementById('playerLevel').textContent = `–£—Ä–æ–≤–µ–Ω—å ${achievements.level}`;
  document.getElementById('playerTitle').textContent = achievements.title;
  document.getElementById('playerPoints').textContent = `${achievements.points} –æ—á–∫–æ–≤`;
}

function renderAchievements() {
  const grid = document.getElementById('achievementsGrid');
  if (!grid) return;
  
  grid.innerHTML = '';
  
  const achievements = state.playerStats.achievements || { unlocked: [] };
  const unlocked = achievements.unlocked || [];
  
  Object.values(ACHIEVEMENTS).forEach(achievement => {
    const isUnlocked = unlocked.includes(achievement.id);
    const card = createAchievementCard(achievement, isUnlocked);
    grid.appendChild(card);
  });
}

function createAchievementCard(achievement, isUnlocked) {
  const card = document.createElement('div');
  card.className = `achievement-card ${achievement.rarity} ${isUnlocked ? 'unlocked' : 'locked'}`;
  
  card.innerHTML = `
    <div class="achievement-status ${isUnlocked ? 'unlocked' : 'locked'}"></div>
    <div class="achievement-header">
      <div class="achievement-icon">${achievement.icon}</div>
      <div class="achievement-info">
        <h4>${achievement.name}</h4>
        <p>${achievement.description}</p>
      </div>
    </div>
    <div class="achievement-footer">
      <div class="achievement-points">+${achievement.points} –æ—á–∫–æ–≤</div>
    </div>
  `;
  
  return card;
}

function hideAchievementsModal() {
  const modal = document.getElementById('achievementsModal');
  if (modal) {
    modal.style.display = 'none';
  }
}

function filterAchievements(tabType) {
  const grid = document.getElementById('achievementsGrid');
  if (!grid) return;
  
  const achievements = state.playerStats.achievements || { unlocked: [] };
  const unlocked = achievements.unlocked || [];
  
  // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
  grid.innerHTML = '';
  
  Object.values(ACHIEVEMENTS).forEach(achievement => {
    const isUnlocked = unlocked.includes(achievement.id);
    let shouldShow = true;
    
    switch (tabType) {
      case 'unlocked':
        shouldShow = isUnlocked;
        break;
      case 'locked':
        shouldShow = !isUnlocked;
        break;
      case 'progress':
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
        shouldShow = !isUnlocked;
        break;
      case 'all':
      default:
        shouldShow = true;
        break;
    }
    
    if (shouldShow) {
      const card = createAchievementCard(achievement, isUnlocked);
      grid.appendChild(card);
    }
  });
}

function hideStatsModal() {
  const modal = document.getElementById('statsModal');
  if (modal) {
    modal.style.display = 'none';
  }
}

// ========================================
// üéµ SOUND SYSTEM
// ========================================

class SoundManager {
  constructor() {
    this.soundEffectsMuted = false;
    this.backgroundMusicMuted = false;
    this.currentTheme = 'casino';
    this.backgroundMusic = null;
    this.sounds = {
      cardOnTable: null,
      cardDisappear: null
    };
    this.init();
  }

  init() {
    // Create audio elements
    this.backgroundMusic = new Audio();
    this.sounds.cardOnTable = new Audio();
    this.sounds.cardDisappear = new Audio();
    
    // Set initial volume
    this.backgroundMusic.volume = 0.3;
    this.sounds.cardOnTable.volume = 0.7;
    this.sounds.cardDisappear.volume = 0.7;
    
    // Set loop for background music
    this.backgroundMusic.loop = true;
    
    // Load sounds for current theme
    this.loadSoundsForTheme(this.currentTheme);
  }

  loadSoundsForTheme(theme) {
    this.currentTheme = theme;
    
    // Load background music
    this.backgroundMusic.src = `./sounds/${theme}/background_music.mp3`;
    
    // Load sound effects
    this.sounds.cardOnTable.src = `./sounds/${theme}/card_on_table.mp3`;
    this.sounds.cardDisappear.src = `./sounds/${theme}/card_disappear.mp3`;
    
    // Preload sounds
    this.sounds.cardOnTable.load();
    this.sounds.cardDisappear.load();
    this.backgroundMusic.load();
    
    // Add error handling for background music
    this.backgroundMusic.addEventListener('error', (e) => {
      console.log('Background music load error:', e);
    });
    
    this.backgroundMusic.addEventListener('canplaythrough', () => {
      console.log('Background music loaded successfully');
    });
  }

  toggleSoundEffects() {
    this.soundEffectsMuted = !this.soundEffectsMuted;
    
    this.sounds.cardOnTable.muted = this.soundEffectsMuted;
    this.sounds.cardDisappear.muted = this.soundEffectsMuted;
    
    this.updateSoundEffectsButton();
  }

  toggleBackgroundMusic() {
    this.backgroundMusicMuted = !this.backgroundMusicMuted;
    
    if (this.backgroundMusicMuted) {
      this.backgroundMusic.pause();
    } else {
      console.log('Starting background music via toggle...');
      console.log('Music source:', this.backgroundMusic.src);
      console.log('Music ready state:', this.backgroundMusic.readyState);
      this.backgroundMusic.play().catch(e => console.log('Background music play failed:', e));
    }
    
    this.updateBackgroundMusicButton();
  }

  updateSoundEffectsButton() {
    const soundEffectsButton = document.getElementById('soundEffectsButton');
    if (soundEffectsButton) {
      soundEffectsButton.textContent = this.soundEffectsMuted ? 'üîá' : 'üîä';
      soundEffectsButton.classList.toggle('muted', this.soundEffectsMuted);
    }
  }

  updateBackgroundMusicButton() {
    const backgroundMusicButton = document.getElementById('backgroundMusicButton');
    if (backgroundMusicButton) {
      backgroundMusicButton.textContent = this.backgroundMusicMuted ? 'üé∂' : 'üéµ';
      backgroundMusicButton.classList.toggle('muted', this.backgroundMusicMuted);
    }
  }

  playCardOnTable() {
    if (!this.soundEffectsMuted && this.sounds.cardOnTable) {
      this.sounds.cardOnTable.currentTime = 0;
      this.sounds.cardOnTable.play().catch(e => console.log('Card on table sound failed:', e));
    }
  }

  playCardDisappear() {
    if (!this.soundEffectsMuted && this.sounds.cardDisappear) {
      this.sounds.cardDisappear.currentTime = 0;
      this.sounds.cardDisappear.play().catch(e => console.log('Card disappear sound failed:', e));
    }
  }

  setTheme(theme) {
    if (theme !== this.currentTheme) {
      this.loadSoundsForTheme(theme);
    }
  }
}

// Initialize sound manager
const soundManager = new SoundManager();

// ========================================
// üéØ GAME STATE & CONFIGURATION
// ========================================

const state = {
  players: [],            // [{id,name,isHuman,hand:Card[]}]
  deck: [],
  trumpCard: null,
  trumpSuit: null,
  table: { pairs: [] },   // [{attack:Card, defense?:Card}]
  attackerIndex: 0,
  defenderIndex: 1,
  phase: "attacking",     // attacking | defending | adding
  maxTableThisRound: 6,
  selectedAttackIndex: -1, // –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–π –∑–∞—â–∏—Ç—ã
  isDefenderEnoughInProgress: false,
  // UI commentary
  lastCommentKey: "",
  commentary: "",
  theme: "casino",        // current theme
  cardSet: "classic",    // current card set
  userProfile: {         // user profile data
    nickname: "–ò–≥—Ä–æ–∫",
    avatar: "üë§"
  },
  // Player statistics
  playerStats: {
    totalGames: 0,
    wins: 0,
    losses: 0,
    currentStreak: 0,
    bestStreak: 0,
    lastResult: null // 'win' or 'loss'
  },
  opponentProfile: {     // AI opponent profile
    name: "–î–æ–Ω–∞–ª—å–¥",
    avatar: "üÉè",
    personality: "aggressive"  // aggressive, defensive, balanced
  }
};

// ========================================
// üé® THEMES
// ========================================

// Get opponent name based on theme
function getOpponentName(theme) {
  const names = {
    casino: "–î–æ–Ω–∞–ª—å–¥",
    underground: "–¢–æ–≤–∞—Ä–∏—â –°—Ç–∞—Ä—à–∏–Ω–∞", 
    tavern: "–ë–µ–ª—ã–π –í–æ–ª–∫"
  };
  return names[theme] || names.casino;
}

// Get quotes based on theme
function getQuotesForTheme(theme) {
  if (theme === 'tavern') {
    return window.whiteWolfQuotes || {
      attacking: { human: ["–ê—Ç–∞–∫—É–µ—à—å, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∏–Ω!"], ai: (name) => [`${name} –∞—Ç–∞–∫—É–µ—Ç —Å —è—Ä–æ—Å—Ç—å—é!`] },
      defending: { human: ["–ó–∞—â–∏—â–∞–π—Å—è –∫–∞–∫ –ª–µ–≤!"], ai: (name) => [`${name} –∑–∞—â–∏—â–∞–µ—Ç—Å—è!`] },
      adding: { human: (covered) => ["–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ—à—å –∫–∞—Ä—Ç—ã!"], ai: ["–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã!"] },
      taking: ["–ë–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã..."]
    };
  } else if (theme === 'underground') {
    return window.sergeantQuotes || {
      attacking: { human: ["–ê—Ç–∞–∫—É–µ—à—å –∏–∑ –ø–æ–¥–∑–µ–º–µ–ª—å—è!"], ai: (name) => [`${name} –∞—Ç–∞–∫—É–µ—Ç –∏–∑ –≥–ª—É–±–∏–Ω!`] },
      defending: { human: ["–ó–∞—â–∏—â–∞–π—Å—è —Å–∏–ª–æ–π —Ç—å–º—ã!"], ai: (name) => [`${name} –∑–∞—â–∏—â–∞–µ—Ç—Å—è —Ç—å–º–æ–π!`] },
      adding: { human: (covered) => ["–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ—à—å —Ç–µ–º–Ω—ã–µ –∫–∞—Ä—Ç—ã!"], ai: ["–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç —Ç–µ–º–Ω—ã–µ –∫–∞—Ä—Ç—ã!"] },
      taking: ["–ë–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã —Ç—å–º—ã..."]
    };
  } else {
    // Default to Donald for casino theme
    return window.donaldQuotes || {
      attacking: { human: ["–ê—Ç–∞–∫—É–µ—à—å –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!"], ai: (name) => [`${name} –∞—Ç–∞–∫—É–µ—Ç –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!`] },
      defending: { human: ["–ó–∞—â–∏—â–∞–π—Å—è –∫–∞–∫ –º–∞—Å—Ç–µ—Ä!"], ai: (name) => [`${name} –∑–∞—â–∏—â–∞–µ—Ç—Å—è –º–∞—Å—Ç–µ—Ä—Å–∫–∏!`] },
      adding: { human: (covered) => ["–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ—à—å –∫–∞—Ä—Ç—ã!"], ai: ["–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã!"] },
      taking: ["–ë–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã..."]
    };
  }
}

// Theme switcher
function setTheme(themeName){
  if (!themeName) return;
  
  // Validate theme
  const validThemes = ['casino', 'underground', 'tavern'];
  if (!validThemes.includes(themeName)) {
    console.warn(`Invalid theme: ${themeName}. Using default theme: casino`);
    themeName = 'casino';
  }
  
  // Remove all theme classes
  document.body.classList.remove('theme-casino', 'theme-underground', 'theme-tavern');
  
  // Add new theme class
  document.body.classList.add(`theme-${themeName}`);
  
  state.theme = themeName;
  
  // Force CSS variables update
  document.body.style.setProperty('--theme-table', `url('./themes/${themeName}/textures/table.jpg')`);
  document.body.style.setProperty('--theme-wall', `url('./themes/${themeName}/textures/wall.jpg')`);
  document.body.style.setProperty('--theme-logo', `url('./themes/${themeName}/icons/logo/durak.png')`);
  
  // Force update table background directly
  const tableElement = document.querySelector('.table');
  if (tableElement) {
    tableElement.style.background = `url('./themes/${themeName}/textures/table.jpg') center/cover no-repeat, var(--secondary-bg)`;
  }
  
  // Update logo source
  const logoElement = document.getElementById('gameLogo');
  if (logoElement) {
    logoElement.src = `./themes/${themeName}/icons/logo/durak.png`;
  }
  
  // Update opponent name based on theme
  if (el.opponentName) {
    el.opponentName.textContent = getOpponentName(themeName);
  }
  
  // Reset commentary cache to force refresh with new theme quotes
  state.lastCommentKey = "";
  
  // Update sound theme
  soundManager.setTheme(themeName);
  
  // Update opponent avatar for new theme
  updateOpponentAvatar();
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
  preloadThemeCards(themeName);
  
  // Force re-render to update card images
  render();
  
  // Debug: log the current theme
  console.log(`Theme switched to: ${themeName}`);
  console.log(`Table texture: ./themes/${themeName}/textures/table.jpg`);
  console.log(`Opponent name: ${getOpponentName(themeName)}`);
  
  // Update theme selection in settings
  updateThemeSelection();
  
  // Save to localStorage
  try {
    localStorage.setItem('theme', themeName);
  } catch(e) {}
}

function updateThemeSelection(){
  const themeOptions = document.querySelectorAll('.theme-option');
  themeOptions.forEach(option => {
    option.classList.remove('selected');
    if (option.dataset.theme === state.theme) {
      option.classList.add('selected');
    }
  });
}

// Card set switcher
// –§—É–Ω–∫—Ü–∏–∏ setCardSet –∏ updateCardSetSelection —É–¥–∞–ª–µ–Ω—ã
// –ö–∞—Ä—Ç—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–µ–º–∞–º –∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

function openSettings(){
  el.settingsMenu.classList.add('open');
  el.settingsOverlay.classList.add('open');
}

function closeSettings(){
  el.settingsMenu.classList.remove('open');
  el.settingsOverlay.classList.remove('open');
}

// ========================================
// üîç TELEGRAM DEBUG FUNCTIONS
// ========================================

function showDebugModal() {
  const debugModal = document.getElementById('debugModal');
  const debugInfo = document.getElementById('debugInfo');
  
  if (debugModal && debugInfo) {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram
    let debugData = 'üîç TELEGRAM WEBAPP DEBUG INFO\n';
    debugData += '================================\n\n';
    
    // Initialize global debug info for server requests
    window.debugInfo = debugData;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    debugData += 'üì± –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–ò–õ–û–ñ–ï–ù–ò–ò:\n';
    debugData += '  - –í–µ—Ä—Å–∏—è: v128 (script.js)\n';
    debugData += '  - –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ' + new Date().toLocaleString('ru-RU') + '\n';
    debugData += '  - User-Agent: ' + navigator.userAgent.substring(0, 50) + '...\n';
    debugData += '  - URL: ' + window.location.href.substring(0, 80) + '...\n\n';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
    debugData += 'üì± Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω: ' + (!!window.Telegram?.WebApp) + '\n';
    debugData += 'üåê window.Telegram: ' + (!!window.Telegram) + '\n';
    debugData += 'üîó window.location.href: ' + window.location.href + '\n\n';
    
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      debugData += 'üìä Telegram WebApp –¥–∞–Ω–Ω—ã–µ:\n';
      debugData += '  - version: ' + (tg.version || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
      debugData += '  - platform: ' + (tg.platform || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
      debugData += '  - colorScheme: ' + (tg.colorScheme || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
      debugData += '  - initData: ' + (tg.initData || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
      debugData += '  - initDataUnsafe: ' + JSON.stringify(tg.initDataUnsafe, null, 2) + '\n';
      debugData += '  - themeParams: ' + JSON.stringify(tg.themeParams, null, 2) + '\n\n';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (tg.initDataUnsafe?.user) {
        debugData += 'üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n';
        debugData += '  - id: ' + tg.initDataUnsafe.user.id + '\n';
        debugData += '  - first_name: ' + (tg.initDataUnsafe.user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
        debugData += '  - last_name: ' + (tg.initDataUnsafe.user.last_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
        debugData += '  - username: ' + (tg.initDataUnsafe.user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
        debugData += '  - photo_url: ' + (tg.initDataUnsafe.user.photo_url || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
      } else {
        debugData += '‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n';
      }
    } else {
      debugData += '‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç—É–ø–∞
    debugData += '\nüîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç—É–ø–∞:\n';
    debugData += '  - window.parent.Telegram: ' + (!!(window.parent && window.parent.Telegram)) + '\n';
    debugData += '  - window.top.Telegram: ' + (!!(window.top && window.top.Telegram)) + '\n';
    debugData += '  - URL —Å–æ–¥–µ—Ä–∂–∏—Ç t.me: ' + window.location.href.includes('t.me') + '\n';
    debugData += '  - URL —Å–æ–¥–µ—Ä–∂–∏—Ç telegram: ' + window.location.href.includes('telegram') + '\n';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram
    debugData += '\nüìã URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram:\n';
    debugData += '  - tgWebAppData: ' + (window.location.hash.includes('tgWebAppData=') ? '–ï–°–¢–¨' : '–ù–ï–¢') + '\n';
    debugData += '  - tgWebAppVersion: ' + (window.location.hash.includes('tgWebAppVersion=') ? '–ï–°–¢–¨' : '–ù–ï–¢') + '\n';
    debugData += '  - tgWebAppPlatform: ' + (window.location.hash.includes('tgWebAppPlatform=') ? '–ï–°–¢–¨' : '–ù–ï–¢') + '\n';
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL
    if (window.location.hash.includes('tgWebAppData=')) {
      try {
        const hash = window.location.hash;
        const tgWebAppData = hash.split('tgWebAppData=')[1].split('&')[0];
        const decodedData = decodeURIComponent(tgWebAppData);
        debugData += '\nüîç –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –¥–∞–Ω–Ω—ã—Ö:\n';
        debugData += '  - tgWebAppData –Ω–∞–π–¥–µ–Ω–æ: –î–ê\n';
        debugData += '  - –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: ' + tgWebAppData.length + ' —Å–∏–º–≤–æ–ª–æ–≤\n';
        
        const userMatch = decodedData.match(/user%3D([^%26]+)/);
        if (userMatch) {
          const userData = decodeURIComponent(userMatch[1]);
          const user = JSON.parse(userData);
          debugData += '\nüë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL:\n';
          debugData += '  - id: ' + user.id + '\n';
          debugData += '  - first_name: ' + (user.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
          debugData += '  - last_name: ' + (user.last_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
          debugData += '  - username: ' + (user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
          debugData += '  - photo_url: ' + (user.photo_url || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ') + '\n';
        } else {
          debugData += '\n‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω user%3D –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö\n';
          
          // Try alternative parsing
          const userDataMatch = hash.match(/user%3D%257B%2522id%2522%253A(\d+)%252C%2522first_name%2522%253A%2522([^%2522]+)%2522%252C%2522last_name%2522%253A%2522([^%2522]+)%2522%252C%2522username%2522%253A%2522([^%2522]+)%2522/);
          if (userDataMatch) {
            debugData += '\nüë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥):\n';
            debugData += '  - id: ' + userDataMatch[1] + '\n';
            debugData += '  - first_name: ' + userDataMatch[2] + '\n';
            debugData += '  - last_name: ' + userDataMatch[3] + '\n';
            debugData += '  - username: ' + userDataMatch[4] + '\n';
          } else {
            debugData += '\n‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª\n';
          }
        }
        
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    debugData += '\nüñ•Ô∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–í–ï–†–ï:\n';
    debugData += '  - –°–µ—Ä–≤–µ—Ä URL: https://durak-miniapp-production.up.railway.app/api/user-photo/USER_ID\n';
    debugData += '  - –°—Ç–∞—Ç—É—Å: HTTPS (Railway —Å–µ—Ä–≤–µ—Ä)\n';
    debugData += '  - Telegram Mini App: ' + (window.location.href.includes('t.me') ? '–î–ê' : '–ù–ï–¢') + '\n';
    debugData += '  - CORS: OK (–æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ HTTPS)\n';
    debugData += '  - –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–µ—Ä–≤–µ—Ä —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Railway\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    debugData += '\nüîç –°–ï–†–í–ï–†–ù–´–ï –ó–ê–ü–†–û–°–´:\n';
    debugData += '  - –°—Ç–∞—Ç—É—Å: –ó–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç (–≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö Railway)\n';
    debugData += '  - –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: GET /api/user-photo/280642403\n';
    debugData += '  - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: 304 (Not Modified)\n';
    debugData += '  - –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 809 –±–∞–π—Ç\n';
    debugData += '  - –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ~200–º—Å\n';
    debugData += '  - –ü—Ä–æ–±–ª–µ–º–∞: –ö–æ–¥ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –≤—ã–∑–æ–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞\n';
    debugData += '  - –†–µ—à–µ–Ω–∏–µ: –ù—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞\n';
    debugData += '\nüîç USER PHOTO DEBUG:\n';
    debugData += '  - user object: ' + (typeof window.currentUser !== 'undefined' ? 'defined' : 'undefined') + '\n';
    debugData += '  - user.photo_url: ' + (typeof window.currentUser !== 'undefined' && window.currentUser?.photo_url || 'undefined') + '\n';
    debugData += '  - user.photo_url type: ' + (typeof window.currentUser !== 'undefined' ? typeof window.currentUser?.photo_url : 'user undefined') + '\n';
    debugData += '  - user.photo_url exists: ' + (typeof window.currentUser !== 'undefined' && !!window.currentUser?.photo_url) + '\n';
    debugData += '  - –ü—Ä–æ–±–ª–µ–º–∞: ' + (typeof window.currentUser !== 'undefined' && window.currentUser?.photo_url ? 'user.photo_url —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' : 'user.photo_url –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') + '\n';
      } catch (e) {
        debugData += '\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –¥–∞–Ω–Ω—ã—Ö: ' + e.message + '\n';
      }
    }
    
    // Add global profile debug log if it exists
    if (window.PROFILE_DEBUG_LOG) {
      debugData += window.PROFILE_DEBUG_LOG;
    }
    
    // Update global debug info with any server request info
    if (window.debugInfo && window.debugInfo !== debugData) {
      debugData += window.debugInfo.substring(debugData.length);
    }
    
    debugInfo.textContent = debugData;
    debugModal.style.display = 'block';
  }
}

function hideDebugModal() {
  const debugModal = document.getElementById('debugModal');
  if (debugModal) {
    debugModal.style.display = 'none';
  }
}

function showVersionModal() {
  const versionModal = document.getElementById('versionModal');
  const versionInfo = document.getElementById('versionInfo');
  
  if (versionModal && versionInfo) {
    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
    let versionData = 'üì± –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ï–†–°–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø\n';
    versionData += '=====================================\n\n';
    
        versionData += 'üî¢ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n';
        versionData += '  - script.js: v103\n';
        versionData += '  - style.css: v74\n';
        versionData += '  - index.html: v103\n\n';
    
    versionData += '‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏:\n';
    versionData += '  - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU') + '\n';
    versionData += '  - –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ' + new Date(document.lastModified).toLocaleString('ru-RU') + '\n\n';
    
    versionData += 'üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:\n';
    versionData += '  - User-Agent: ' + navigator.userAgent.substring(0, 60) + '...\n';
    versionData += '  - –Ø–∑—ã–∫: ' + navigator.language + '\n';
    versionData += '  - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + navigator.platform + '\n\n';
    
    versionData += 'üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ URL:\n';
    versionData += '  - –ü–æ–ª–Ω—ã–π URL: ' + window.location.href + '\n';
    versionData += '  - –î–æ–º–µ–Ω: ' + window.location.hostname + '\n';
    versionData += '  - –ü—Ä–æ—Ç–æ–∫–æ–ª: ' + window.location.protocol + '\n\n';
    
    versionData += 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:\n';
    versionData += '  - –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ' + (performance.now() / 1000).toFixed(2) + ' —Å–µ–∫\n';
    versionData += '  - –†–∞–∑–º–µ—Ä DOM: ' + document.documentElement.outerHTML.length + ' —Å–∏–º–≤–æ–ª–æ–≤\n';
    
    versionInfo.textContent = versionData;
    versionModal.style.display = 'block';
  }
}

function hideVersionModal() {
  const versionModal = document.getElementById('versionModal');
  if (versionModal) {
    versionModal.style.display = 'none';
  }
}

// Test function to manually parse Telegram data
function testTelegramDataParsing() {
  console.log('üß™ Testing Telegram data parsing...');
  
  const hash = window.location.hash;
  console.log('üîç Full hash:', hash);
  
  if (hash.includes('tgWebAppData=')) {
    const tgWebAppData = hash.split('tgWebAppData=')[1].split('&')[0];
    console.log('üîç tgWebAppData:', tgWebAppData);
    
    const decodedData = decodeURIComponent(tgWebAppData);
    console.log('üîç Decoded data:', decodedData);
    
    // Try different parsing methods
    const userMatch1 = decodedData.match(/user%3D([^%26]+)/);
    console.log('üîç Pattern 1 (user%3D):', userMatch1);
    
    const userMatch2 = decodedData.match(/user=([^&]+)/);
    console.log('üîç Pattern 2 (user=):', userMatch2);
    
    const userMatch3 = hash.match(/user%3D%257B%2522id%2522%253A(\d+)%252C%2522first_name%2522%253A%2522([^%2522]+)%2522%252C%2522last_name%2522%253A%2522([^%2522]+)%2522%252C%2522username%2522%253A%2522([^%2522]+)%2522/);
    console.log('üîç Pattern 3 (manual):', userMatch3);
    
    if (userMatch3) {
      const user = {
        id: parseInt(userMatch3[1]),
        first_name: userMatch3[2],
        last_name: userMatch3[3],
        username: userMatch3[4]
      };
      console.log('‚úÖ Successfully parsed user:', user);
      return user;
    }
  }
  
  console.log('‚ùå No user data found');
  return null;
}

// ========================================
// üë§ USER PROFILE FUNCTIONS
// ========================================

// Profile modal functions
function openProfile(){
  console.log('üîç ========================================');
  console.log('üîç PROFILE OPENED - TIMESTAMP:', new Date().toISOString());
  console.log('üîç ========================================');
  console.log('üîç openProfile function called!');
  console.log('üîç el.profileModal:', el.profileModal);
  console.log('üîç el.profileOverlay:', el.profileOverlay);
  
  // CRITICAL: Make this function globally accessible for debugging
  window.PROFILE_OPENED_COUNT = (window.PROFILE_OPENED_COUNT || 0) + 1;
  console.log('üîç Profile opened count:', window.PROFILE_OPENED_COUNT);
  
  // Initialize window.debugInfo if it doesn't exist
  if (!window.debugInfo) {
    window.debugInfo = '';
    console.log('üîç Initialized window.debugInfo');
  }
  
  // Add debug info GLOBALLY so it persists
  if (!window.PROFILE_DEBUG_LOG) {
    window.PROFILE_DEBUG_LOG = '';
  }
  
  window.PROFILE_DEBUG_LOG += '\nüîç PROFILE OPENED DEBUG:\n';
  window.PROFILE_DEBUG_LOG += '  - Status: Profile opened successfully\n';
  window.PROFILE_DEBUG_LOG += '  - Time: ' + new Date().toLocaleString('ru-RU') + '\n';
  window.PROFILE_DEBUG_LOG += '  - Function: openProfile() called\n';
  window.PROFILE_DEBUG_LOG += '  - Call count: ' + window.PROFILE_OPENED_COUNT + '\n';
  window.PROFILE_DEBUG_LOG += '  - Elements found: profileModal=' + !!el.profileModal + ', profileOverlay=' + !!el.profileOverlay + '\n';
  
  // Also add to window.debugInfo if it exists
  if (window.debugInfo) {
    window.debugInfo += window.PROFILE_DEBUG_LOG;
  }
  
  console.log('üîç Added debug info to window.debugInfo');
  console.log('üîç window.debugInfo length:', window.debugInfo.length);
  console.log('üîç ========================================');
  
  // Make openProfile globally accessible for manual testing
  window.manualOpenProfile = openProfile;
  console.log('üîç openProfile is now available as window.manualOpenProfile()');
  
  el.profileModal.classList.add('active');
  el.profileOverlay.classList.add('active');
  // Load current profile data
  el.userNickname.value = state.userProfile.nickname;
  el.userAvatar.textContent = state.userProfile.avatar;
  
  // Load Telegram data if available
  console.log('üîç window.Telegram:', window.Telegram);
  console.log('üîç window.Telegram?.WebApp:', window.Telegram?.WebApp);
  
  // Debug panel for Telegram data (based on cookbook)
  if (window.Telegram?.WebApp) {
    console.log('üîç Telegram WebApp Debug Info:');
    console.log('  - initData:', window.Telegram.WebApp.initData);
    console.log('  - initDataUnsafe:', window.Telegram.WebApp.initDataUnsafe);
    console.log('  - version:', window.Telegram.WebApp.version);
    console.log('  - platform:', window.Telegram.WebApp.platform);
    console.log('  - colorScheme:', window.Telegram.WebApp.colorScheme);
    console.log('  - themeParams:', window.Telegram.WebApp.themeParams);
  }
  
  const tg = window.Telegram?.WebApp;
  console.log('üîç Telegram WebApp available:', !!tg);
  console.log('üîç Telegram initDataUnsafe:', tg?.initDataUnsafe);
  console.log('üîç Telegram initData:', tg?.initData);
  
  // Try alternative Telegram SDK access
  const tgAlt = window.Telegram;
  console.log('üîç Alternative Telegram access:', !!tgAlt);
  
  // Check if we're in Telegram environment
  const isInTelegram = window.Telegram || 
                      (window.parent && window.parent.Telegram) || 
                      (window.top && window.top.Telegram) ||
                      window.location.href.includes('t.me') ||
                      window.location.href.includes('telegram');
  console.log('üîç Is in Telegram environment:', isInTelegram);
  
  // Get user ID for debugging (based on cookbook)
  let userId = null;
  if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
    userId = window.Telegram.WebApp.initDataUnsafe.user.id;
    console.log('üîç Telegram User ID:', userId);
  }
  
  // Try to get user data from alternative sources
  let user = null;
  if (tg && tg.initDataUnsafe?.user) {
    user = tg.initDataUnsafe.user;
    console.log('üîç Using primary Telegram WebApp access');
  } else if (tgAlt && tgAlt.WebApp && tgAlt.WebApp.initDataUnsafe?.user) {
    user = tgAlt.WebApp.initDataUnsafe.user;
    console.log('üîç Using alternative Telegram WebApp access');
  } else if (tgAlt && tgAlt.WebApp && tgAlt.WebApp.initData) {
    // Try to parse initData manually
    try {
      const initData = new URLSearchParams(tgAlt.WebApp.initData);
      const userParam = initData.get('user');
      if (userParam) {
        user = JSON.parse(decodeURIComponent(userParam));
        console.log('üîç Parsed user from initData:', user);
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Failed to parse initData:', e);
    }
  } else {
    // Try to get user data from URL parameters
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const userParam = urlParams.get('user');
      if (userParam) {
        user = JSON.parse(decodeURIComponent(userParam));
        console.log('üîç Parsed user from URL params:', user);
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Failed to parse URL params:', e);
    }
    
    // Try to parse Telegram WebApp data from URL hash
    if (!user) {
      try {
        const hash = window.location.hash;
        if (hash.includes('tgWebAppData=')) {
          const tgWebAppData = hash.split('tgWebAppData=')[1].split('&')[0];
          const decodedData = decodeURIComponent(tgWebAppData);
          console.log('üîç Raw tgWebAppData:', decodedData);
          
          // Parse user data from tgWebAppData - try different patterns
          let userMatch = decodedData.match(/user%3D([^%26]+)/);
          if (!userMatch) {
            // Try alternative pattern
            userMatch = decodedData.match(/user=([^&]+)/);
          }
          if (!userMatch) {
            // Try direct JSON pattern
            userMatch = decodedData.match(/user%3D%257B([^%257D]+)%257D/);
            if (userMatch) {
              const userData = '{"' + userMatch[1].replace(/%2522/g, '"').replace(/%253A/g, ':').replace(/%252C/g, ',') + '}';
              user = JSON.parse(userData);
              console.log('üîç Parsed user from alternative pattern:', user);
            }
          } else {
            const userData = decodeURIComponent(userMatch[1]);
            user = JSON.parse(userData);
            console.log('üîç Parsed user from tgWebAppData:', user);
          }
          
          // If still no user, try manual parsing from your specific URL format
          if (!user) {
            try {
              // Extract user data from the specific URL format you showed
              const userDataMatch = hash.match(/user%3D%257B%2522id%2522%253A(\d+)%252C%2522first_name%2522%253A%2522([^%2522]+)%2522%252C%2522last_name%2522%253A%2522([^%2522]+)%2522%252C%2522username%2522%253A%2522([^%2522]+)%2522/);
              if (userDataMatch) {
                user = {
                  id: parseInt(userDataMatch[1]),
                  first_name: userDataMatch[2],
                  last_name: userDataMatch[3],
                  username: userDataMatch[4]
                };
                console.log('üîç Parsed user from manual pattern:', user);
              }
            } catch (e) {
              console.log('‚ö†Ô∏è Failed manual parsing:', e);
            }
          }
        }
      } catch (e) {
        console.log('‚ö†Ô∏è Failed to parse tgWebAppData:', e);
      }
    }
    
    // Try to access Telegram from parent window
    if (!user && window.parent && window.parent.Telegram) {
      try {
        const parentTg = window.parent.Telegram.WebApp;
        if (parentTg && parentTg.initDataUnsafe?.user) {
          user = parentTg.initDataUnsafe.user;
          console.log('üîç Using parent window Telegram access:', user);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è Failed to access parent Telegram:', e);
      }
    }
    
    // Try to access Telegram from top window
    if (!user && window.top && window.top.Telegram) {
      try {
        const topTg = window.top.Telegram.WebApp;
        if (topTg && topTg.initDataUnsafe?.user) {
          user = topTg.initDataUnsafe.user;
          console.log('üîç Using top window Telegram access:', user);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è Failed to access top Telegram:', e);
      }
    }
  }
  
  if (user) {
    console.log('üîç Telegram user data:', user);
    
    // Get references to Telegram input fields
    const telegramUsernameInput = document.getElementById('telegramUsername');
    const telegramFirstNameInput = document.getElementById('telegramFirstName');
    const telegramUserIdInput = document.getElementById('telegramUserId');
    
    console.log('üîç Telegram input fields found:', {
      username: !!telegramUsernameInput,
      firstName: !!telegramFirstNameInput,
      userId: !!telegramUserIdInput
    });
    
    // Update Telegram username
    if (telegramUsernameInput) {
      const username = user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω';
      telegramUsernameInput.value = username;
      console.log('‚úÖ Set Telegram username:', username);
    }
    
    // Update Telegram first name
    if (telegramFirstNameInput) {
      let fullName = user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      if (user.last_name) {
        fullName += ` ${user.last_name}`;
      }
      telegramFirstNameInput.value = fullName;
      console.log('‚úÖ Set Telegram first name:', fullName);
      
      // Also update the main nickname field with Telegram name
      if (el.userNickname) {
        el.userNickname.value = fullName;
        state.userProfile.nickname = fullName;
        console.log('‚úÖ Updated main nickname with Telegram name:', fullName);
      }
    }
    
    // Update Telegram User ID
    if (telegramUserIdInput && user.id) {
      telegramUserIdInput.value = user.id.toString();
      console.log('‚úÖ Set Telegram User ID:', user.id);
    }
    
    // Store user info globally for debug panel
    window.currentUser = user;
    console.log('üîç STORED USER GLOBALLY:', user);
    
    // Update avatar with Telegram photo if available
    console.log('üîç USER PHOTO CHECK - user.photo_url:', user.photo_url);
    console.log('üîç USER PHOTO CHECK - typeof user.photo_url:', typeof user.photo_url);
    console.log('üîç USER PHOTO CHECK - user.photo_url exists:', !!user.photo_url);
    
    // ALWAYS try to get photo through server API (regardless of user.photo_url)
    console.log('üîÑ ALWAYS trying to get photo through server API...');
    console.log('üîç User ID:', user.id);
    console.log('üîç Server URL:', `https://durak-miniapp-production.up.railway.app/api/user-photo/${user.id}`);
    
    // Add debug info to the debug panel
    if (window.debugInfo) {
      window.debugInfo += '\nüîç SERVER REQUEST DEBUG:\n';
      window.debugInfo += '  - User ID: ' + (user.id || 'undefined') + '\n';
      window.debugInfo += '  - User ID type: ' + (typeof user.id) + '\n';
      window.debugInfo += '  - Server URL: https://durak-miniapp-production.up.railway.app/api/user-photo/' + (user.id || 'undefined') + '\n';
      window.debugInfo += '  - Status: Making request...\n';
    }
    
    if (user.id) {
      // Server now returns image directly, not JSON
      const photoUrl = `https://durak-miniapp-production.up.railway.app/api/user-photo/${user.id}`;
      console.log('‚úÖ Using server photo proxy:', photoUrl);
      
      if (window.debugInfo) {
        window.debugInfo += '  - Photo URL: ' + photoUrl + '\n';
        window.debugInfo += '  - Loading directly from server...\n';
      }
      
      // Use the server URL directly as the photo URL
      user.photo_url = photoUrl;
      
      // Set the photo directly without additional checks
      el.userAvatar.style.backgroundImage = `url(${photoUrl})`;
      el.userAvatar.style.backgroundSize = 'cover';
      el.userAvatar.style.backgroundPosition = 'center';
      el.userAvatar.style.backgroundRepeat = 'no-repeat';
      el.userAvatar.style.borderRadius = '50%';
      el.userAvatar.textContent = '';
      el.userAvatar.style.color = 'transparent';
      
      console.log('‚úÖ Photo set successfully!');
      if (window.debugInfo) {
        window.debugInfo += '  - Result: SUCCESS - Photo loaded from server!\n';
      }
    } else {
      if (window.debugInfo) {
        window.debugInfo += '  - Result: NO USER ID - Skipping server request\n';
      }
      loadUserPhoto(user, el);
    }
    
    if (user.photo_url) {
      console.log('‚úÖ Setting Telegram photo:', user.photo_url);
      console.log('üîç Photo URL details:', {
        url: user.photo_url,
        length: user.photo_url.length,
        startsWith: user.photo_url.substring(0, 20),
        endsWith: user.photo_url.substring(user.photo_url.length - 20)
      });
      
      // Try to get photo through WebApp API first (if available)
      if (window.Telegram?.WebApp?.initDataUnsafe?.user?.photo_url) {
        const webAppPhotoUrl = window.Telegram.WebApp.initDataUnsafe.user.photo_url;
        if (webAppPhotoUrl && webAppPhotoUrl !== user.photo_url) {
          console.log('üîÑ Found alternative photo URL from WebApp API:', webAppPhotoUrl);
          user.photo_url = webAppPhotoUrl;
        }
      }
      
      // Try to get photo through server API (if available)
      console.log('üîç User object for server check:', user);
      console.log('üîç User ID:', user.id);
      console.log('üîç User ID type:', typeof user.id);
      
      // Add debug info to the debug panel
      console.log('üîç DEBUG INFO CHECK - window.debugInfo:', !!window.debugInfo);
      
      if (window.debugInfo) {
        window.debugInfo += '\nüîç SERVER REQUEST DEBUG:\n';
        window.debugInfo += '  - User ID: ' + (user.id || 'undefined') + '\n';
        window.debugInfo += '  - User ID type: ' + (typeof user.id) + '\n';
        window.debugInfo += '  - Server URL: https://durak-miniapp-production.up.railway.app/api/user-photo/' + (user.id || 'undefined') + '\n';
        console.log('üîç Added debug info to window.debugInfo');
      } else {
        // Force debug info even if window.debugInfo is not set
        console.log('üîç FORCING DEBUG INFO - window.debugInfo not set');
        // Initialize it manually
        window.debugInfo = '\nüîç SERVER REQUEST DEBUG:\n';
        window.debugInfo += '  - User ID: ' + (user.id || 'undefined') + '\n';
        window.debugInfo += '  - User ID type: ' + (typeof user.id) + '\n';
        window.debugInfo += '  - Server URL: https://durak-miniapp-production.up.railway.app/api/user-photo/' + (user.id || 'undefined') + '\n';
      }
      
      if (user.id) {
        console.log('üîÑ Trying to get photo through server API...');
        console.log('üîç Server URL:', `https://durak-miniapp-production.up.railway.app/api/user-photo/${user.id}`);
        
        if (window.debugInfo) {
          window.debugInfo += '  - Status: Making request...\n';
        }
        
        fetch(`https://durak-miniapp-production.up.railway.app/api/user-photo/${user.id}`)
          .then(response => {
            console.log('üì° Server response status:', response.status);
            if (window.debugInfo) {
              window.debugInfo += '  - Response status: ' + response.status + '\n';
            }
            return response.json();
          })
          .then(data => {
            console.log('üìã Server response data:', data);
            if (window.debugInfo) {
              window.debugInfo += '  - Response data: ' + JSON.stringify(data).substring(0, 100) + '...\n';
            }
            if (data.success && data.hasPhoto && data.photoUrl) {
              console.log('‚úÖ Got photo from server API:', data.photoUrl);
              if (window.debugInfo) {
                window.debugInfo += '  - Result: SUCCESS - Photo found!\n';
                window.debugInfo += '  - Photo URL: ' + data.photoUrl + '\n';
              }
              user.photo_url = data.photoUrl;
              // Continue with photo loading process
              loadUserPhoto(user, el);
            } else {
              console.log('‚ö†Ô∏è Server API returned no photo, using original URL');
              console.log('üîç Server response:', data);
              if (window.debugInfo) {
                window.debugInfo += '  - Result: NO PHOTO - Using original URL\n';
              }
              loadUserPhoto(user, el);
            }
          })
          .catch(error => {
            console.log('‚ùå Server API error:', error.message);
            console.log('‚ö†Ô∏è Server API not available, using original URL');
            if (window.debugInfo) {
              window.debugInfo += '  - Result: ERROR - ' + error.message + '\n';
            }
            loadUserPhoto(user, el);
          });
      } else {
        if (window.debugInfo) {
          window.debugInfo += '  - Result: NO USER ID - Skipping server request\n';
        }
        loadUserPhoto(user, el);
      }
    } else {
      console.log('‚ö†Ô∏è No Telegram photo available');
      // Use initials as fallback
      const firstName = user.first_name || '';
      const lastName = user.last_name || '';
      const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
      el.userAvatar.textContent = initials;
      el.userAvatar.style.backgroundImage = 'none';
      el.userAvatar.style.color = 'white';
      el.userAvatar.style.backgroundColor = 'var(--accent)';
      el.userAvatar.style.borderRadius = '50%';
    }
  } else {
    console.log('‚ö†Ô∏è Telegram data not available');
    
    // Check if we're in Telegram environment but data is not available
    const telegramUsernameInput = document.getElementById('telegramUsername');
    const telegramFirstNameInput = document.getElementById('telegramFirstName');
    
    if (isInTelegram) {
      if (telegramUsernameInput) {
        telegramUsernameInput.value = 'Telegram: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
      }
      if (telegramFirstNameInput) {
        telegramFirstNameInput.value = 'Telegram: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
      }
      console.log('üîç In Telegram but user data not accessible');
    } else {
      if (telegramUsernameInput) {
        telegramUsernameInput.value = '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram';
      }
      if (telegramFirstNameInput) {
        telegramFirstNameInput.value = '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram';
      }
      console.log('üîç Not in Telegram environment');
    }
  }
}

// Helper function to load user photo
function loadUserPhoto(user, el) {
  if (!user.photo_url) {
    console.log('‚ö†Ô∏è No photo URL available');
    // Use initials as fallback
    const firstName = user.first_name || '';
    const lastName = user.last_name || '';
    const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
    el.userAvatar.textContent = initials;
    el.userAvatar.style.backgroundImage = 'none';
    el.userAvatar.style.color = 'white';
    el.userAvatar.style.backgroundColor = 'var(--accent)';
    el.userAvatar.style.borderRadius = '50%';
    return;
  }
      
  // Check if photo is accessible (not restricted by privacy settings)
  console.log('üîç Checking photo accessibility...');
  console.log('üì∏ Photo URL analysis:', {
    url: user.photo_url,
    isTelegramCDN: user.photo_url.includes('t.me'),
    isUserpic: user.photo_url.includes('userpic'),
    protocol: user.photo_url.startsWith('https') ? 'HTTPS' : 'HTTP'
  });
  
  // First, try to fetch the photo with proper error handling
  const fetchPromise = fetch(user.photo_url, { 
    method: 'HEAD', // Only check if resource exists, don't download
    mode: 'cors',
    headers: {
      'User-Agent': 'Mozilla/5.0 (compatible; TelegramMiniApp/1.0)'
    }
  });
  
  // Add timeout to prevent hanging
  const timeoutPromise = new Promise((_, reject) => 
    setTimeout(() => reject(new Error('Photo check timeout')), 5000)
  );
  
  Promise.race([fetchPromise, timeoutPromise])
  .then(response => {
    console.log('üì° Photo fetch response:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      headers: Object.fromEntries(response.headers.entries())
    });
    
    if (response.ok) {
      console.log('‚úÖ Photo is accessible, setting as background');
      el.userAvatar.style.backgroundImage = `url(${user.photo_url})`;
      el.userAvatar.style.backgroundSize = 'cover';
      el.userAvatar.style.backgroundPosition = 'center';
      el.userAvatar.style.backgroundRepeat = 'no-repeat';
      el.userAvatar.style.borderRadius = '50%';
      el.userAvatar.textContent = '';
      el.userAvatar.style.color = 'transparent';
    } else {
      throw new Error(`Photo not accessible: ${response.status} ${response.statusText}`);
    }
  })
  .catch(error => {
    console.log('‚ùå Photo not accessible due to privacy settings:', error.message);
    
    // Try alternative method with no-cors
    console.log('üîÑ Trying alternative method...');
    const testImg = new Image();
    testImg.crossOrigin = 'anonymous';
    testImg.onload = function() {
      console.log('‚úÖ Photo loaded via Image fallback');
      el.userAvatar.style.backgroundImage = `url(${user.photo_url})`;
      el.userAvatar.style.backgroundSize = 'cover';
      el.userAvatar.style.backgroundPosition = 'center';
      el.userAvatar.style.backgroundRepeat = 'no-repeat';
      el.userAvatar.style.borderRadius = '50%';
      el.userAvatar.textContent = '';
      el.userAvatar.style.color = 'transparent';
    };
    testImg.onerror = function() {
      console.log('‚ùå All methods failed, using initials fallback');
      // Fallback to initials when photo is restricted by privacy
      const firstName = user.first_name || '';
      const lastName = user.last_name || '';
      const initials = (firstName.charAt(0) + lastName.charAt(0)).toUpperCase();
      el.userAvatar.textContent = initials;
      el.userAvatar.style.backgroundImage = 'none';
      el.userAvatar.style.color = 'white';
      el.userAvatar.style.backgroundColor = 'var(--accent)';
      el.userAvatar.style.borderRadius = '50%';
    };
    testImg.src = user.photo_url;
  });
}

function closeProfile(){
  el.profileModal.classList.remove('active');
  el.profileOverlay.classList.remove('active');
}

// Save profile data
function saveProfile(){
  const nickname = el.userNickname.value.trim();
  const avatar = el.userAvatar.textContent;
  
  if (nickname.length === 0) {
    alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º');
    return;
  }
  
  if (nickname.length > 20) {
    alert('–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤');
    return;
  }
  
  // Update state
  state.userProfile.nickname = nickname;
  state.userProfile.avatar = avatar;
  
  // Save to localStorage
  try {
    localStorage.setItem('userProfile', JSON.stringify(state.userProfile));
  } catch(e) {
    console.warn('Failed to save profile to localStorage');
  }
  
  // Update profile button with avatar
  if (el.profileButton) {
    el.profileButton.textContent = avatar;
  }
  
  closeProfile();
}

// Avatar selection (simple emoji picker)
function changeAvatar(){
  const avatars = ['üë§', 'üéÆ', 'üÉè', 'üëë', 'üéØ', '‚≠ê', 'üî•', 'üíé', 'üé≤', 'üÉè'];
  const currentIndex = avatars.indexOf(state.userProfile.avatar);
  const nextIndex = (currentIndex + 1) % avatars.length;
  const newAvatar = avatars[nextIndex];
  
  state.userProfile.avatar = newAvatar;
  el.userAvatar.textContent = newAvatar;
}

// ========================================
// üñ•Ô∏è DOM ELEMENTS & UI STATE
// ========================================

const el = {
  opponents: null,
  attackRow: null,
  defenseRow: null,
  playerHand: null,
  btnAdd: null,
  btnTake: null,
  btnEnough: null,
  tableSide: null,
  trumpCard: null,
  deckCard: null,
  trumpLabel: null,
  deckLabel: null,
  table: null,
  toggleLang: null,
  // Opponent elements
  opponentComment: null,
  opponentHint: null,
  opponentAvatar: null,
  opponentName: null,
  // Settings elements
  settingsButton: null,
  settingsMenu: null,
  settingsOverlay: null,
  settingsClose: null,
  // Profile elements
  profileButton: null,
  profileModal: null,
  profileOverlay: null,
  profileClose: null,
  userAvatar: null,
  userNickname: null,
  avatarChangeBtn: null,
  profileSaveBtn: null,
  profileCancelBtn: null
};

const ui = { selected: new Set() };

// ========================================
// üöÄ INITIALIZATION & SETUP
// ========================================

function initDomRefs(){
  el.opponents = document.getElementById("opponents");
  el.attackRow = document.getElementById("attackRow");
  el.defenseRow = document.getElementById("defenseRow");
  el.playerHand = document.getElementById("playerHand");
  el.table = document.getElementById("table");
  el.btnAdd = document.getElementById("btnAdd");
  el.btnTake = document.getElementById("btnTake");
  el.btnEnough = document.getElementById("btnEnough");
  el.statsButton = document.getElementById("statsButton");
  el.tableSide = document.getElementById("tableSide");
  el.trumpCard = document.getElementById("trumpCard");
  el.deckCard = document.getElementById("deckCard");
  el.trumpLabel = document.getElementById("trumpLabel");
  el.deckLabel = document.getElementById("deckLabel");
  // Opponent elements
  el.opponentComment = document.getElementById("opponentComment");
  el.opponentHint = document.getElementById("opponentHint");
  el.opponentAvatar = document.getElementById("opponentAvatar");
  el.opponentName = document.getElementById("opponentName");
  el.opponentCards = document.getElementById("opponentCards");
  
  // Debug: Check if opponent elements are found
  if (!el.opponentAvatar) console.log("‚ùå opponentAvatar not found");
  if (!el.opponentComment) console.log("‚ùå opponentComment not found");
  if (!el.opponentCards) console.log("‚ùå opponentCards not found");
  // Settings elements
  el.settingsButton = document.getElementById("settingsButton");
  el.settingsMenu = document.getElementById("settingsMenu");
  el.settingsOverlay = document.getElementById("settingsOverlay");
  el.settingsClose = document.getElementById("settingsClose");
  // Profile elements
  el.profileButton = document.getElementById("profileButton");
  el.profileModal = document.getElementById("profileModal");
  el.profileOverlay = document.getElementById("profileOverlay");
  el.profileClose = document.getElementById("profileClose");
  el.userAvatar = document.getElementById("userAvatar");
  el.userNickname = document.getElementById("userNickname");
  el.avatarChangeBtn = document.getElementById("avatarChangeBtn");
  el.profileSaveBtn = document.getElementById("profileSaveBtn");
  el.profileCancelBtn = document.getElementById("profileCancelBtn");
}

function initPlayers(numOpp=1){
  state.players = [{ id:"P0", name:"You", isHuman:true, hand:[] }];
  for (let i=1;i<=numOpp;i++) state.players.push({ id:`AI${i}`, name:"–î–æ–Ω–∞–ª—å–¥", isHuman:false, hand:[] });
}

function dealInitial(){
  console.log('üé≤ dealInitial called');
  state.deck = shuffle(createDeck36());
  console.log('üÉè Deck created, length:', state.deck.length);
  console.log('üÉè Deck before dealing (first 5):', state.deck.slice(0, 5).map(c => text(c)));
  
  for (let r=0;r<6;r++){
    for (const p of state.players) p.hand.push(state.deck.pop());
  }
  
  // –ö–æ–∑—ã—Ä—å - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –≤ –∫–æ–ª–æ–¥–µ (–∫–æ—Ç–æ—Ä–∞—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏)
  // –í –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º –î—É—Ä–∞–∫–µ –∫–æ–∑—ã—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏
  state.trumpCard = state.deck[state.deck.length - 1];
  state.trumpSuit = state.trumpCard.suit;
  
  console.log('üë• Players after dealing:');
  state.players.forEach((p, i) => {
    console.log(`  Player ${i}: ${p.name}, hand: ${p.hand.length} cards`);
  });
  
  // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
  console.log('üîç === TRUMP DEBUG INFO ===');
  console.log('üÉè Trump card:', state.trumpCard, 'Suit:', state.trumpSuit);
  console.log('üÉè Deck length after dealing:', state.deck.length);
  console.log('üÉè Last card in deck:', state.deck[state.deck.length - 1]);
  console.log('üÉè Trump suit set to:', state.trumpSuit);
  console.log('üÉè Remaining deck (last 5):', state.deck.slice(-5).map(c => text(c)));
  console.log('üÉè Trump card should be:', state.deck[state.deck.length - 1]);
  console.log('üÉè Trump suit should be:', state.deck[state.deck.length - 1].suit);
  console.log('üÉè Trump card === last card?', state.trumpCard === state.deck[state.deck.length - 1]);
  console.log('üÉè Trump suit === last card suit?', state.trumpSuit === state.deck[state.deck.length - 1].suit);
  console.log('üÉè Full deck after dealing:', state.deck.map(c => text(c)));
  console.log('üîç === END TRUMP DEBUG ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–∑—ã—Ä—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞
  console.log('üÉè Deck before dealing (first 5):', state.deck.slice(0, 5).map(c => text(c)));
  console.log('üÉè Deck after dealing (last 5):', state.deck.slice(-5).map(c => text(c)));
  console.log('üÉè Trump card is last card:', state.trumpCard === state.deck[state.deck.length - 1]);

  const lowestTrump = hand =>
    hand.filter(c => c.suit === state.trumpSuit)
        .sort((a,b)=>RANK_VALUE[a.rank]-RANK_VALUE[b.rank])[0];

  let bestIdx = -1, bestRank = 999;
  state.players.forEach((p,idx)=>{
    const lt = lowestTrump(p.hand);
    if (lt && RANK_VALUE[lt.rank] < bestRank){ bestRank = RANK_VALUE[lt.rank]; bestIdx = idx; }
  });
  state.attackerIndex = bestIdx >= 0 ? bestIdx : 0;
  state.defenderIndex = (state.attackerIndex + 1) % state.players.length;

  const defender = state.players[state.defenderIndex];
  state.maxTableThisRound = Math.min(6, defender.hand.length);
  state.table.pairs = [];
  state.phase = "attacking";
  state.selectedAttackIndex = -1;
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  state.lastCommentKey = "";
  state.isTakingCards = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç
}

// ========================================
// üé® UI RENDERING & DISPLAY
// ========================================


function applyUILabels(){
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ª–µ–π–±–ª—ã
  if (el.btnTake) el.btnTake.innerHTML = `<span class="icon"></span> –í–∑—è—Ç—å –∫–∞—Ä—Ç—ã`;
  if (el.btnEnough) el.btnEnough.innerHTML = `<span class="icon"></span> –ë–∏—Ç–æ`;
  if (el.trumpLabel) el.trumpLabel.textContent = "–ö–æ–∑—ã—Ä—å";
  if (el.deckLabel) el.deckLabel.textContent = "–ö–æ–ª–æ–¥–∞";
}


function renderHeader(){
  // Header now shows game logo instead of trump/deck info
  // Logo is static and doesn't need updates
}

function updateOpponentPanel(){
  // Update opponent name based on current theme
  if (el.opponentName) {
    el.opponentName.textContent = getOpponentName(state.theme);
  }
  
  // Update avatar based on game situation
  updateOpponentAvatar();
  
  // Update opponent commentary
  updateCommentaryIfNeeded();
  if (el.opponentComment) {
    el.opponentComment.textContent = state.commentary || "";
  }
  
  // Update hint for player
  if (el.opponentHint) {
    let hint = "";
    if (state.phase === "defending" && state.defenderIndex === 0) {
      const openAttacks = state.table.pairs.filter(p => !p.defense).length;
      if (openAttacks > 1) {
        hint = "";
      } else if (state.selectedAttackIndex >= 0) {
        hint = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞—â–∏—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –∞—Ç–∞–∫–∏";
      }
    }
    el.opponentHint.textContent = hint;
  }
}

function updateOpponentAvatar(){
  if (!el.opponentAvatar) return;
  
  // Dynamic avatars based on game situation
  const avatars = {
    // Default states
    base: "base.jpg",
    happy: "happy.jpg", 
    sad: "sad.jpg",
    thinks: "thinks.jpg"
  };
  
  let avatarFile = avatars.base; // default
  
  // Determine avatar based on game state
  const aiPlayer = state.players.find(p => !p.isHuman);
  const humanPlayer = state.players[0];
  
  if (aiPlayer && humanPlayer) {
    // Special situations
    if (state.isTakingCards && state.defenderIndex !== 0) {
      // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã - –≥—Ä—É—Å—Ç–Ω—ã–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –ò–ò)
      avatarFile = avatars.sad;
    } else if (state.isTakingCards && state.defenderIndex === 0) {
      // –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã - –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å—á–∞—Å—Ç–ª–∏–≤—ã–π
      avatarFile = avatars.happy;
    } else if (state.phase === "defending" && state.defenderIndex !== 0) {
      // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è - –¥—É–º–∞–µ—Ç
      avatarFile = avatars.thinks;
    } else if (state.phase === "attacking" && state.attackerIndex !== 0) {
      // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫—É–µ—Ç - —Å—á–∞—Å—Ç–ª–∏–≤—ã–π
      avatarFile = avatars.happy;
    } else if (state.phase === "adding" && state.attackerIndex !== 0) {
      // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç - –¥—É–º–∞–µ—Ç
      avatarFile = avatars.thinks;
    } else if (aiPlayer.hand.length <= 2) {
      // –£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –º–∞–ª–æ –∫–∞—Ä—Ç - —Å—á–∞—Å—Ç–ª–∏–≤—ã–π
      avatarFile = avatars.happy;
    } else if (humanPlayer.hand.length <= 2) {
      // –£ –∏–≥—Ä–æ–∫–∞ –º–∞–ª–æ –∫–∞—Ä—Ç - —Å—á–∞—Å—Ç–ª–∏–≤—ã–π
      avatarFile = avatars.happy;
    } else {
      // –û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      avatarFile = avatars.base;
    }
  }
  
  // Update avatar with smooth transition
  const currentSrc = el.opponentAvatar.src;
  const newSrc = `./themes/${state.theme}/icons/person/${avatarFile}`;
  
  if (currentSrc !== newSrc) {
    console.log(`üé≠ Changing avatar to: ${avatarFile}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è crossfade
    const tempImg = new Image();
    tempImg.onload = () => {
      // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const clone = el.opponentAvatar.cloneNode(true);
      clone.style.position = 'absolute';
      clone.style.top = '0';
      clone.style.left = '0';
      clone.style.zIndex = '2';
      clone.style.transition = 'opacity 0.3s ease';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–æ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      el.opponentAvatar.parentNode.style.position = 'relative';
      el.opponentAvatar.parentNode.appendChild(clone);
      
      // –ú–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      el.opponentAvatar.src = newSrc;
      el.opponentAvatar.alt = `Opponent ${avatarFile.replace('.jpg', '')}`;
      el.opponentAvatar.style.opacity = '0';
      el.opponentAvatar.style.transition = 'opacity 0.3s ease';
      
      // –ü–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      setTimeout(() => {
        el.opponentAvatar.style.opacity = '1';
        clone.style.opacity = '0';
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–æ–Ω –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
          clone.remove();
        }, 300);
      }, 50);
    };
    
    tempImg.src = newSrc;
  }
}


// ---------- Commentary ----------
function updateCommentaryIfNeeded(){
  const covered = state.table.pairs.filter(p=>p.defense).length;
  const total = state.table.pairs.length;
  const key = `${state.phase}|${state.attackerIndex}|${state.defenderIndex}|${covered}/${total}`;
  if (key === state.lastCommentKey) return;
  state.lastCommentKey = key;

  const attacker = state.players[state.attackerIndex];
  const defender = state.players[state.defenderIndex];
  const isHumanAtt = !!attacker.isHuman;
  const isHumanDef = !!defender.isHuman;

  const pick = arr => arr[(Math.random()*arr.length)|0];
  const L = getQuotesForTheme(state.theme);

  let msg = "";
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
  const humanPlayer = state.players[0];
  const aiPlayer = state.players.find(p => !p.isHuman);
  
  if (aiPlayer && humanPlayer) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
    const isManyCards = total >= 6; // –ú–Ω–æ–≥–æ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ
    const isPlayerFewCards = humanPlayer.hand.length <= 2;
    const isAiFewCards = aiPlayer.hand.length <= 2;
    const isEmptyDeck = state.deck.length === 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–∑—ã—Ä–∏
    const lastCard = state.table.pairs[state.table.pairs.length - 1];
    const trumpSuit = state.trumpSuit;
    const isPlayerTrump = lastCard && lastCard.attack && lastCard.attack.suit === trumpSuit;
    const isAiTrump = lastCard && lastCard.defense && lastCard.defense && lastCard.defense.suit === trumpSuit;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    if (isManyCards && L.special && L.special.manyCards) {
      msg = pick(L.special.manyCards);
    }
    else if (isPlayerFewCards && L.special && L.special.playerFewCards) {
      msg = pick(L.special.playerFewCards);
    }
    else if (isAiFewCards && L.special && L.special.aiFewCards) {
      msg = pick(L.special.aiFewCards);
    }
    else if (isEmptyDeck && L.special && L.special.emptyDeck) {
      msg = pick(L.special.emptyDeck);
    }
    else if (isPlayerTrump && L.special && L.special.playerTrump) {
      msg = pick(L.special.playerTrump);
    }
    else if (isAiTrump && L.special && L.special.aiTrump) {
      msg = pick(L.special.aiTrump);
    }
    // –û–±—ã—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ñ–∞–∑–∞–º
    else if (state.phase === "attacking"){
      if (isHumanAtt) {
        msg = pick(L.attacking.human);
      } else {
        const aiPlayer = state.players.find(p => !p.isHuman);
        if (typeof L.attacking.ai === 'function') {
        msg = pick(L.attacking.ai(aiPlayer?.name || "–î–æ–Ω–∞–ª—å–¥"));
        } else {
          msg = pick(L.attacking.ai);
        }
      }
    } else if (state.phase === "defending"){
      if (isHumanDef) {
        msg = pick(L.defending.human);
      } else {
        const aiPlayer = state.players.find(p => !p.isHuman);
        if (typeof L.defending.ai === 'function') {
        msg = pick(L.defending.ai(aiPlayer?.name || "–î–æ–Ω–∞–ª—å–¥"));
        } else {
          msg = pick(L.defending.ai);
        }
      }
    } else if (state.phase === "adding"){
      const allCovered = total>0 && covered===total;
      if (isHumanAtt) {
        if (typeof L.adding.human === 'function') {
        msg = pick(L.adding.human(allCovered));
      } else {
          msg = pick(L.adding.human);
        }
      } else {
        msg = pick(L.adding.ai);
      }
    }
  } else {
    // Fallback –∫ –æ–±—ã—á–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
    if (state.phase === "attacking"){
      if (isHumanAtt) {
        msg = pick(L.attacking.human);
      } else {
        const aiPlayer = state.players.find(p => !p.isHuman);
        if (typeof L.attacking.ai === 'function') {
        msg = pick(L.attacking.ai(aiPlayer?.name || "–î–æ–Ω–∞–ª—å–¥"));
        } else {
          msg = pick(L.attacking.ai);
        }
      }
    } else if (state.phase === "defending"){
      if (isHumanDef) {
        msg = pick(L.defending.human);
      } else {
        const aiPlayer = state.players.find(p => !p.isHuman);
        if (typeof L.defending.ai === 'function') {
        msg = pick(L.defending.ai(aiPlayer?.name || "–î–æ–Ω–∞–ª—å–¥"));
        } else {
          msg = pick(L.defending.ai);
        }
      }
    } else if (state.phase === "adding"){
      const allCovered = total>0 && covered===total;
      if (isHumanAtt) {
        if (typeof L.adding.human === 'function') {
        msg = pick(L.adding.human(allCovered));
      } else {
          msg = pick(L.adding.human);
        }
      } else {
        msg = pick(L.adding.ai);
      }
    }
  }

  state.commentary = msg;
}


function renderOpponents(){
  // Update cards in the opponent panel
  const opponentCards = document.getElementById("opponentCards");
  if (!opponentCards) return;
  
  opponentCards.innerHTML = "";
  
  state.players.forEach((p,idx)=>{
    if (p.isHuman) return;
    const card = document.createElement("div");
    card.className = "opponent";
    const pile = document.createElement("div");
    pile.className = "pile";
    // Render facedown backs for opponent cards
    const backsToShow = Math.min(p.hand.length, 8);
    for (let i=0;i<backsToShow;i++){
      const back = document.createElement("div");
      back.className = "card back small";
      pile.appendChild(back);
    }
    if (p.hand.length > backsToShow){
      const more = document.createElement("div");
      more.className = "more";
      more.textContent = `+${p.hand.length - backsToShow}`;
      pile.appendChild(more);
    }
    const meta = document.createElement("div");
    const count = document.createElement("div"); count.className = "count"; count.textContent = `${p.hand.length}`;
    meta.appendChild(count);
    card.appendChild(pile); card.appendChild(meta);
    if (idx === state.attackerIndex) card.title = "–ê—Ç–∞–∫—É—é—â–∏–π";
    if (idx === state.defenderIndex) card.title = "–ó–∞—â–∏—â–∞—é—â–∏–π—Å—è";
    opponentCards.appendChild(card);
  });
}

function renderTable(){
  if (!el.attackRow || !el.defenseRow) return;
  
  el.attackRow.innerHTML = "";
  el.defenseRow.innerHTML = "";
  state.table.pairs.forEach((pair, idx)=>{
    const a = document.createElement("div");
    a.className = "card";
    a.innerHTML = `<img alt="${text(pair.attack)}" src="${cardImagePath(pair.attack)}">`;
    if (pair.attack.suit === state.trumpSuit) a.classList.add("trump");

    // –í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã
    const isHumanDefender = state.defenderIndex === 0 && state.phase === "defending";
    const canSelect = isHumanDefender && !pair.defense;
    if (canSelect){
      a.classList.add("playable");
      if (state.selectedAttackIndex === idx) a.classList.add("selected");
      a.addEventListener("click", ()=>{
        state.selectedAttackIndex = (state.selectedAttackIndex === idx ? -1 : idx);
        renderHand();
        renderTable();
        updateButtons();
      });
    }
    el.attackRow.appendChild(a);

    const d = document.createElement("div");
    d.className = "card";
    if (pair.defense){
      d.innerHTML = `<img alt="${text(pair.defense)}" src="${cardImagePath(pair.defense)}">`;
      if (pair.defense.suit === state.trumpSuit) d.classList.add("trump");
    } else {
      d.classList.add("disabled");
      d.textContent = "‚Äî";
    }
    el.defenseRow.appendChild(d);
  });
  
  renderTableSide();
}

function renderTableSide(){
  if (!el.trumpCard || !el.deckCard) return;
  
  // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø RENDER
  console.log('üîç === RENDER TABLE SIDE DEBUG ===');
  console.log('üÉè renderTableSide: trumpCard=', state.trumpCard, 'trumpSuit=', state.trumpSuit);
  console.log('üÉè renderTableSide: deck length=', state.deck.length, 'last card=', state.deck[state.deck.length - 1]);
  console.log('üÉè renderTableSide: trumpCard.suit=', state.trumpCard?.suit, 'state.trumpSuit=', state.trumpSuit);
  console.log('üÉè renderTableSide: trumpCard === last card?', state.trumpCard === state.deck[state.deck.length - 1]);
  console.log('üÉè renderTableSide: trumpCard.suit === last card suit?', state.trumpCard?.suit === state.deck[state.deck.length - 1]?.suit);
  console.log('üÉè renderTableSide: Full deck:', state.deck.map(c => text(c)));
  console.log('üîç === END RENDER DEBUG ===');
  
  // Trump indicator card - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å—Ç—å –∫–æ–∑—ã—Ä—è (–ª—É—á—à–µ –≤–∏–¥–Ω–æ)
  el.trumpCard.className = "card indicator";
  // –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç—å
  el.trumpCard.style.backgroundImage = 'none';
  el.trumpCard.innerHTML = state.trumpSuit ? `<div class="trump-symbol">${state.trumpSuit}</div>` : "?";
  if (state.trumpSuit){
    el.trumpCard.classList.add((state.trumpSuit==='‚ô¶'||state.trumpSuit==='‚ô•') ? 'suit-red' : 'suit-black');
    el.trumpCard.classList.add('trump');
  }
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞
  console.log('üîç === CRITICAL TRUMP DISPLAY DEBUG ===');
  console.log('üîç el.trumpCard.innerHTML =', el.trumpCard.innerHTML);
  console.log('üîç el.trumpCard.textContent =', el.trumpCard.textContent);
  console.log('üîç el.trumpCard.innerText =', el.trumpCard.innerText);
  console.log('üîç el.trumpCard.className =', el.trumpCard.className);
  console.log('üîç el.trumpCard.style.backgroundImage =', el.trumpCard.style.backgroundImage);
  console.log('üîç === END CRITICAL TRUMP DISPLAY DEBUG ===');
  
  // Deck count indicator card
  el.deckCard.className = "card indicator back";
  el.deckCard.innerHTML = `<div class="deck-count">${state.deck.length}</div>`;
}

function getPlayableForHuman(){
  const me = state.players[0];

  if (state.phase === "attacking"){
    if (state.attackerIndex !== 0) return [];
    return me.hand;
  }

  if (state.phase === "defending"){
    if (state.defenderIndex !== 0) return [];
    const openIdxs = state.table.pairs.map((p,i)=>!p.defense ? i : -1).filter(i=>i>=0);
    if (!openIdxs.length) return [];
    if (state.selectedAttackIndex >= 0 && openIdxs.includes(state.selectedAttackIndex)){
      const target = state.table.pairs[state.selectedAttackIndex].attack;
      return me.hand.filter(c => beats(c, target, state.trumpSuit));
    }
    return me.hand.filter(c => openIdxs.some(i => beats(c, state.table.pairs[i].attack, state.trumpSuit)));
  }

  if (state.phase === "adding"){
    if (state.attackerIndex !== 0) return [];
    const totalNow = state.table.pairs.length;
    if (totalNow >= state.maxTableThisRound) return [];
    const ranks = new Set(state.table.pairs.flatMap(p=>[p.attack.rank, p.defense?.rank].filter(Boolean)));
    return me.hand.filter(c => ranks.has(c.rank));
  }

  return [];
}


function adjustCardOverlap() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  if (!el.playerHand) {
    return;
  }
  
  const cards = el.playerHand.querySelectorAll('.card');
  const cardCount = cards.length;
  
  // –î–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
  if (cardCount < 7) {
    cards.forEach((card, index) => {
      card.style.marginRight = '0px';
      card.style.marginLeft = '';
      card.style.transform = '';
    });
    return;
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–µ–∑–∂–∞–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
  const containerWidth = el.playerHand.offsetWidth;
  const cardWidth = 70; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã
  const minSpacing = 10; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –Ω–∞–µ–∑–∂–∞–Ω–∏–µ
  const totalCardWidth = cardCount * cardWidth;
  const availableSpace = containerWidth - (cardCount - 1) * minSpacing;
  
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–µ–∑–∂–∞–Ω–∏–µ
  let overlapPx = Math.floor((totalCardWidth - availableSpace) / (cardCount - 1));
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–µ–∑–∂–∞–Ω–∏–µ –Ω–∞ 20% –¥–ª—è 5-6 –∫–∞—Ä—Ç
  if (cardCount >= 5 && cardCount <= 6) {
    overlapPx = Math.max(overlapPx, 18); // –ú–∏–Ω–∏–º—É–º 18px –¥–ª—è 5-6 –∫–∞—Ä—Ç
    if (overlapPx > 0) {
      overlapPx = Math.floor(overlapPx * 1.2); // +20% –∫ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–µ–∑–∂–∞–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
  if (overlapPx <= 0) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–µ–∑–∂–∞–Ω–∏–µ –Ω–∞ 20% –¥–ª—è 5-6 –∫–∞—Ä—Ç
    if (cardCount >= 5 && cardCount <= 6) {
      overlapPx = Math.max(18, 30 - cardCount * 1.8); // +20% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    } else {
    overlapPx = Math.max(15, 25 - cardCount * 1.5);
    }
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–µ–∑–∂–∞–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∫ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
  cards.forEach((card, index) => {
    if (index < cards.length - 1) {
      card.style.marginRight = `-${overlapPx}px`;
    } else {
      card.style.marginRight = '0px';
    }
  });
}

function renderHand(){
  console.log('üéÆ renderHand called');
  const me = state.players[0];
  console.log('üë§ Player:', me);
  console.log('üÉè Hand length:', me.hand.length);
  console.log('üéØ playerHand element:', el.playerHand);
  
  if (!el.playerHand) {
    console.error('‚ùå playerHand element not found!');
    return;
  }
  
  el.playerHand.innerHTML = "";
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç
  const cardCount = me.hand.length;
  el.playerHand.className = "hand"; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 20 –¥–ª—è —Å—Ç–∏–ª–µ–π
  const styleCardCount = Math.min(cardCount, 20);
  el.playerHand.classList.add(`cards-${styleCardCount}`);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–∞–µ–∑–∂–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
  
  const playable = new Set(getPlayableForHuman().map(c=>c.id));
  me.hand
    .slice()
    .sort((a,b)=> {
      if (a.suit===b.suit) return RANK_VALUE[a.rank]-RANK_VALUE[b.rank];
      if (a.suit===state.trumpSuit && b.suit!==state.trumpSuit) return 1;
      if (b.suit===state.trumpSuit && a.suit!==state.trumpSuit) return -1;
      return SUITS.indexOf(a.suit)-SUITS.indexOf(b.suit);
    })
    .forEach((card, index)=>{
      const d = document.createElement("div");
      d.className = "card";
      d.setAttribute("data-card-id", card.id);
      const cardSrc = cardImagePath(card);
      d.innerHTML = `<img alt="${text(card)}" src="${cardSrc}" loading="eager">`;
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç
      console.log(`üîç === CARD DISPLAY DEBUG ===`);
      console.log(`üîç Card: ${text(card)}, card.suit: ${card.suit}, card.rank: ${card.rank}`);
      console.log(`üîç cardSrc: ${cardSrc}`);
      console.log(`üîç cardImagePath result:`, cardImagePath(card));
      console.log(`üîç === END CARD DISPLAY DEBUG ===`);
      
  // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø RENDER HAND
  console.log(`üîç === RENDER HAND DEBUG ===`);
  console.log(`üîç Checking card ${text(card)}: card.suit=${card.suit}, state.trumpSuit=${state.trumpSuit}, matches=${card.suit === state.trumpSuit}`);
  console.log(`üîç state.trumpCard=`, state.trumpCard);
  console.log(`üîç state.trumpSuit=`, state.trumpSuit);
  console.log(`üîç state.deck.length=`, state.deck.length);
  console.log(`üîç last card in deck=`, state.deck[state.deck.length - 1]);
  console.log(`üîç trumpCard === last card?`, state.trumpCard === state.deck[state.deck.length - 1]);
  console.log(`üîç trumpCard.suit === last card suit?`, state.trumpCard?.suit === state.deck[state.deck.length - 1]?.suit);
  console.log(`üîç === END RENDER HAND DEBUG ===`);
      
      if (card.suit === state.trumpSuit) {
        console.log(`üÉè Adding trump class to card: ${text(card)}, trumpSuit: ${state.trumpSuit}`);
        d.classList.add("trump");
      }
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –∫–æ–∑—ã—Ä—å
      console.log(`üîç === CRITICAL CARD MARKING DEBUG ===`);
      console.log(`üîç Card: ${text(card)}, card.suit: ${card.suit}, state.trumpSuit: ${state.trumpSuit}`);
      console.log(`üîç Card is trump: ${card.suit === state.trumpSuit}`);
      console.log(`üîç state.trumpCard:`, state.trumpCard);
      console.log(`üîç state.trumpSuit:`, state.trumpSuit);
      console.log(`üîç === END CRITICAL CARD MARKING DEBUG ===`);
      if (playable.has(card.id)) d.classList.add("playable");
      if (ui.selected.has(card.id)) d.classList.add("selected");
      
      // –ù–∞–µ–∑–∂–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è CSS –∫–ª–∞—Å—Å–∞–º–∏
      
      d.addEventListener("click", ()=>{
        if (!playable.has(card.id)) return;
        if (ui.selected.has(card.id)) ui.selected.delete(card.id);
        else ui.selected.add(card.id);
        // If defending, auto-pick a target attack this card can beat when none selected
        if (state.phase === "defending" && state.defenderIndex === 0){
          if (ui.selected.size === 1){
            const [onlyId] = Array.from(ui.selected);
            const selectedCard = me.hand.find(c=>c.id===onlyId);
            if (selectedCard){
              const openIdxs = state.table.pairs.map((p,i)=>!p.defense ? i : -1).filter(i=>i>=0);
              // Always choose the first valid open attack this card can beat
              const canBeatIdx = openIdxs.find(i => beats(selectedCard, state.table.pairs[i].attack, state.trumpSuit));
              if (canBeatIdx !== undefined) {
                console.log(`üéØ Auto-selecting attack target ${canBeatIdx} for card ${text(selectedCard)}`);
                state.selectedAttackIndex = canBeatIdx;
              } else {
                console.log(`‚ùå No valid attack targets for card ${text(selectedCard)}`);
              }
            }
          }
        }
        render();
      });
      el.playerHand.appendChild(d);
    });
}

function render(){
  console.log('üé® render() called');
  renderHeader();
  renderOpponents();
  renderTable();
  renderHand();
  updateButtons();
  applyUILabels();
  updateOpponentPanel();
  console.log('‚úÖ render() completed');
}

function updateButtons(){
  el.btnAdd.disabled = true;
  el.btnTake.disabled = true;
  el.btnEnough.disabled = true;

  const isHumanAttacker = state.attackerIndex === 0;
  const isHumanDefender = state.defenderIndex === 0;

  if (state.phase === "attacking" && isHumanAttacker){
    el.btnAdd.innerHTML = `<span class="icon"></span> –°—ã–≥—Ä–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ`;
    el.btnAdd.setAttribute('data-phase', 'attacking');
    el.btnAdd.disabled = ui.selected.size === 0;
    // –í —Ñ–∞–∑–µ "attacking" –∫–Ω–æ–ø–∫–∞ "–ë–∏—Ç–æ" –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∞ (–µ—â–µ –Ω–µ—Ç –ø–∞—Ä)
    el.btnEnough.disabled = true;
  } else if (state.phase === "defending" && isHumanDefender){
    el.btnAdd.innerHTML = `<span class="icon"></span> –ö—Ä—ã—Ç—å`;
    el.btnAdd.setAttribute('data-phase', 'defending');
    const canBeat = state.selectedAttackIndex >= 0 && ui.selected.size === 1;
    el.btnAdd.disabled = !canBeat;
    el.btnTake.disabled = false;
    // –ó–∞—â–∏—â–∞—é—â–∏–π—Å—è –ù–ò–ö–û–ì–î–ê –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç "–ë–∏—Ç–æ"
    el.btnEnough.disabled = true;
  } else if (state.phase === "adding" && isHumanAttacker){
    el.btnAdd.innerHTML = `<span class="icon"></span> –ü–æ–¥–∫–∏–Ω—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ`;
    el.btnAdd.setAttribute('data-phase', 'adding');
    el.btnAdd.disabled = ui.selected.size === 0;
    // –ö–Ω–æ–ø–∫–∞ "–ë–∏—Ç–æ" –¥–æ—Å—Ç—É–ø–Ω–∞ –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –í–°–ï –ø–∞—Ä—ã –ø–æ–∫—Ä—ã—Ç—ã
    el.btnEnough.disabled = !state.table.pairs.every(p=>p.defense);
  }
}

// ---------- Card Fade Out Animation ----------
function createCardFadeOutAnimation(cards, onComplete){
  console.log("üé¨ createCardFadeOutAnimation called!");
  if (!cards.length) {
    console.log("‚ùå No cards provided for fade out animation");
    if (onComplete) onComplete();
    return;
  }
  
  console.log(`üé¨ Starting fade out animation for ${cards.length} cards`);
  console.log("üé¨ Cards:", cards.map(c => text(c)));
  
  // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
  const attackCards = el.attackRow.querySelectorAll('.card');
  const defenseCards = el.defenseRow.querySelectorAll('.card');
  const allTableCards = [...attackCards, ...defenseCards];
  
  console.log('üé¨ Attack cards found:', attackCards.length);
  console.log('üé¨ Defense cards found:', defenseCards.length);
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  const realCards = [];
  cards.forEach((card, index) => {
    let foundCard = null;
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∞—Ç–∞–∫—É—é—â–∏—Ö –∫–∞—Ä—Ç–∞—Ö
    if (index < attackCards.length) {
      foundCard = attackCards[index];
    }
    // –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
    else if (index - attackCards.length < defenseCards.length) {
      const defenseIndex = index - attackCards.length;
      foundCard = defenseCards[defenseIndex];
    }
    
    if (foundCard) {
      realCards.push(foundCard);
      console.log(`‚úÖ Found real card for fade out: ${text(card)}`);
    }
  });
  
  if (realCards.length === 0) {
    console.log("‚ùå No real cards found for fade out animation");
    if (onComplete) onComplete();
    return;
  }
  
  // Fallback: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –∫–∞—Ä—Ç—ã –∏—Å—á–µ–∑–Ω—É—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  const fallbackTimeout = setTimeout(() => {
    console.log("‚ö†Ô∏è Fallback: forcing animation completion");
    if (onComplete) onComplete();
  }, 3000);
  
  // –ü—Ä–æ—Å—Ç–∞—è –∏ –∑–∞–º–µ—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ —Å—Ç–∏–ª–∏
  realCards.forEach((card, index) => {
    setTimeout(() => {
      console.log(`üé¨ Starting animation for card ${index + 1}/${realCards.length}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      card.classList.add('disappearing-explode');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
      card.style.transition = 'all 1.8s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
      
      // –°–Ω–∞—á–∞–ª–∞ –∫–∞—Ä—Ç–∞ –º–∏–≥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
      let blinkCount = 0;
      const blinkInterval = setInterval(() => {
        if (blinkCount >= 6) {
          clearInterval(blinkInterval);
          // –ü–æ—Å–ª–µ –º–∏–≥–∞–Ω–∏—è –∫–∞—Ä—Ç–∞ –∏—Å—á–µ–∑–∞–µ—Ç
          card.style.transform = 'scale(1.4) rotate(15deg) translateY(-50px)';
          card.style.opacity = '0';
          card.style.filter = 'brightness(3) blur(5px)';
          return;
        }
        
        // –ú–∏–≥–∞–Ω–∏–µ
        if (blinkCount % 2 === 0) {
          card.style.filter = 'brightness(2)';
          card.style.transform = 'scale(1.1)';
        } else {
          card.style.filter = 'brightness(0.5)';
          card.style.transform = 'scale(1)';
        }
        blinkCount++;
      }, 150); // –ú–∏–≥–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 150ms
      
    }, index * 200); // –ó–∞–¥–µ—Ä–∂–∫–∞ 200ms –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
  });
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const animationDuration = 2000 + (realCards.length * 200); // 2000ms + 200ms –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É
  setTimeout(() => {
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    realCards.forEach(card => {
      card.classList.remove('disappearing-explode');
      card.style.transition = '';
      card.style.transform = '';
      card.style.opacity = '';
      card.style.filter = '';
    });
    
    console.log('üé¨ Animation completed');
    clearTimeout(fallbackTimeout);
    if (onComplete) onComplete();
  }, animationDuration);
}

// ---------- Flying Card Animation ----------
function createFlyingCardsToPlayer(cards, onComplete){
  if (!el.table || !el.playerHand) return;
  
  console.log('üé¨ createFlyingCardsToPlayer called with:', cards.length, 'cards');
  console.log('üé¨ Cards:', cards.map(c => text(c)));
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
  const handRect = el.playerHand.getBoundingClientRect();
  const targetPosition = {
    left: handRect.left + handRect.width / 2,
    top: handRect.top + handRect.height / 2
  };
  
  // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
  cards.forEach((card, index) => {
    setTimeout(() => {
      createFlyingCardToPlayer(card, targetPosition, () => {
        // –í—ã–∑—ã–≤–∞–µ–º callback —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã
        if (index === cards.length - 1) {
          setTimeout(onComplete, 200);
        }
      });
    }, index * 150); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
  });
}

function createFlyingCardsToOpponent(cards, onComplete){
  if (!el.table) return;
  
  console.log('üé¨ Creating flying cards to opponent:', cards.length, 'cards');
  console.log('üé¨ opponentCards element:', el.opponentCards);
  
  // –ï—Å–ª–∏ opponentCards –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
  let targetPosition;
  if (el.opponentCards) {
    const opponentRect = el.opponentCards.getBoundingClientRect();
    targetPosition = {
      left: opponentRect.left + opponentRect.width / 2,
      top: opponentRect.top + opponentRect.height / 2
    };
    console.log('üé¨ Using opponentCards position:', targetPosition);
  } else {
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
    targetPosition = {
      left: window.innerWidth / 2,
      top: 100
    };
    console.log('üé¨ Using fallback position:', targetPosition);
  }
  
  // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
  cards.forEach((card, index) => {
    setTimeout(() => {
      createFlyingCardToOpponent(card, targetPosition, () => {
        // –í—ã–∑—ã–≤–∞–µ–º callback —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã
        if (index === cards.length - 1) {
          setTimeout(onComplete, 200);
        }
      });
    }, index * 150); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
  });
}

function createFlyingCardToPlayer(card, targetPosition, onComplete){
  if (!el.table) return;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
  let startPosition = null;
  
  // –ò—â–µ–º –∫–∞—Ä—Ç—É –≤ –∞—Ç–∞–∫—É—é—â–∏—Ö –∫–∞—Ä—Ç–∞—Ö –ø–æ —Ç–µ–∫—Å—Ç—É
  const attackCards = el.attackRow.querySelectorAll('.card');
  for (let i = 0; i < attackCards.length; i++) {
    const cardElement = attackCards[i];
    const cardText = cardElement.textContent || cardElement.innerText;
    if (cardText.includes(text(card).split(' ')[0])) {
      const cardRect = cardElement.getBoundingClientRect();
      startPosition = {
        left: cardRect.left + cardRect.width / 2,
        top: cardRect.top + cardRect.height / 2
      };
      console.log(`üé¨ Found attack card at index ${i}, position:`, startPosition);
      break;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞—Ç–∞–∫—É—é—â–∏—Ö, –∏—â–µ–º –≤ –∑–∞—â–∏—Ç–Ω—ã—Ö
  if (!startPosition) {
    const defenseCards = el.defenseRow.querySelectorAll('.card');
    for (let i = 0; i < defenseCards.length; i++) {
      const cardElement = defenseCards[i];
      const cardText = cardElement.textContent || cardElement.innerText;
      if (cardText.includes(text(card).split(' ')[0])) {
        const cardRect = cardElement.getBoundingClientRect();
        startPosition = {
          left: cardRect.left + cardRect.width / 2,
          top: cardRect.top + cardRect.height / 2
        };
        console.log(`üé¨ Found defense card at index ${i}, position:`, startPosition);
        break;
      }
    }
  }
  
  // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä —Å—Ç–æ–ª–∞ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  if (!startPosition) {
    const tableRect = el.table.getBoundingClientRect();
    startPosition = {
      left: tableRect.left + tableRect.width / 2,
      top: tableRect.top + tableRect.height / 2
    };
    console.log(`üé¨ Using fallback position (center):`, startPosition);
  }
  
  // –°–æ–∑–¥–∞–µ–º –ª–µ—Ç—è—â—É—é –∫–∞—Ä—Ç—É
  const flyingCard = document.createElement('div');
  flyingCard.style.cssText = `
    position: fixed;
    left: ${startPosition.left}px;
    top: ${startPosition.top}px;
    width: 60px;
    height: 90px;
    z-index: 99999;
    pointer-events: none;
    border: 2px solid #333;
    background: white;
    border-radius: 6px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
    color: #333;
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
  const cardImg = document.createElement('img');
  cardImg.src = cardImagePath(card);
  cardImg.style.cssText = 'width: 100%; height: 100%; object-fit: contain; border-radius: 4px;';
  flyingCard.appendChild(cardImg);
  
  document.body.appendChild(flyingCard);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞
  const duration = 800;
  const startTime = performance.now();
  
  function animate(currentTime) {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);
    
    // –ö—Ä–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏–∏ (ease-out)
    const easeOut = 1 - Math.pow(1 - progress, 3);
    
    const currentLeft = startPosition.left + (targetPosition.left - startPosition.left) * easeOut;
    const currentTop = startPosition.top + (targetPosition.top - startPosition.top) * easeOut;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    const rotation = progress * 360;
    
    flyingCard.style.left = currentLeft + 'px';
    flyingCard.style.top = currentTop + 'px';
    flyingCard.style.transform = `rotate(${rotation}deg) scale(${1 - progress * 0.3})`;
    flyingCard.style.opacity = 1 - progress * 0.5;
    
    if (progress < 1) {
      requestAnimationFrame(animate);
    } else {
      // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      flyingCard.remove();
      if (onComplete) onComplete();
    }
  }
  
  requestAnimationFrame(animate);
}

function createFlyingCardsToLeft(cards, onComplete){
  if (!cards.length) {
    console.log("‚ùå No cards provided for animation");
    if (onComplete) onComplete();
    return;
  }
  
  console.log(`üé¨ Animating real cards to left: ${cards.length} cards`);
  console.log('üé¨ Cards to animate:', cards.map(c => text(c)));
  
  // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
  const realCards = [];
  const attackCards = el.attackRow.querySelectorAll('.card');
  const defenseCards = el.defenseRow.querySelectorAll('.card');
  
  console.log('üé¨ Attack cards found:', attackCards.length);
  console.log('üé¨ Defense cards found:', defenseCards.length);
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
  const allTableCards = [...attackCards, ...defenseCards];
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
  cards.forEach((card, index) => {
    const cardText = text(card);
    console.log(`üé¨ Looking for card: ${cardText} at index ${index}`);
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Å—Å–∏–≤–µ
    let foundCard = null;
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∞—Ç–∞–∫—É—é—â–∏—Ö –∫–∞—Ä—Ç–∞—Ö
    if (index < attackCards.length) {
      foundCard = attackCards[index];
      console.log(`üé¨ Found attack card at index ${index}`);
    }
    // –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
    else if (index - attackCards.length < defenseCards.length) {
      const defenseIndex = index - attackCards.length;
      foundCard = defenseCards[defenseIndex];
      console.log(`üé¨ Found defense card at index ${defenseIndex}`);
    }
    
    if (foundCard) {
      realCards.push(foundCard);
      console.log(`‚úÖ Found real card for: ${cardText}`);
    } else {
      console.log(`‚ùå No real card found for: ${cardText}`);
    }
  });
  
  console.log(`üé¨ Real cards found: ${realCards.length}`);
  
  if (realCards.length === 0) {
    console.log("‚ùå No real cards found for animation");
    if (onComplete) onComplete();
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–∞—Ä—Ç
  const originalStyles = realCards.map(card => ({
    position: card.style.position,
    transform: card.style.transform,
    transition: card.style.transition,
    zIndex: card.style.zIndex
  }));
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  realCards.forEach((card, index) => {
    const rect = card.getBoundingClientRect();
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ fixed –ø–æ–∑–∏—Ü–∏—é
    card.style.position = 'fixed';
    card.style.left = rect.left + 'px';
    card.style.top = rect.top + 'px';
    card.style.zIndex = '99999';
    card.style.transition = 'none';
    card.style.transform = 'translate(0, 0)';
  });
  
  // –ê–Ω–∏–º–∞—Ü–∏—è —É–ª–µ—Ç–∞ –≤–ª–µ–≤–æ
  const startTime = performance.now();
  const duration = 1200;
  
  function animate(currentTime) {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);
    
    // –ö—Ä–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏–∏ (ease-out)
    const easeOut = 1 - Math.pow(1 - progress, 3);
    
    realCards.forEach((card, index) => {
      const startLeft = parseFloat(card.style.left);
      const startTop = parseFloat(card.style.top);
      
      // –£–ª–µ—Ç–∞–µ–º –≤–ª–µ–≤–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
      const targetLeft = -200 - (index * 30);
      const targetTop = startTop + (Math.sin(progress * Math.PI) * 40);
      
      const currentLeft = startLeft + (targetLeft - startLeft) * easeOut;
      const currentTop = startTop + (targetTop - startTop) * easeOut;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
      const rotation = progress * 360;
      const scale = 1 - progress * 0.3;
      
      card.style.left = currentLeft + 'px';
      card.style.top = currentTop + 'px';
      card.style.transform = `translate(-50%, -50%) rotate(${rotation}deg) scale(${scale})`;
      card.style.opacity = 1 - progress * 0.7;
    });
    
    if (progress < 1) {
      requestAnimationFrame(animate);
    } else {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –∏ —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—ã
      realCards.forEach((card, index) => {
        card.style.position = originalStyles[index].position;
        card.style.transform = originalStyles[index].transform;
        card.style.transition = originalStyles[index].transition;
        card.style.zIndex = originalStyles[index].zIndex;
        card.style.left = '';
        card.style.top = '';
        card.style.opacity = '';
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ DOM
        card.remove();
      });
      
      if (onComplete) onComplete();
    }
  }
  
  requestAnimationFrame(animate);
}

function createFlyingCardToOpponent(card, targetPosition, onComplete){
  if (!el.table) return;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
  let startPosition = null;
  
  // –ò—â–µ–º –∫–∞—Ä—Ç—É –≤ –∞—Ç–∞–∫—É—é—â–∏—Ö –∫–∞—Ä—Ç–∞—Ö –ø–æ —Ç–µ–∫—Å—Ç—É
  const attackCards = el.attackRow.querySelectorAll('.card');
  for (let i = 0; i < attackCards.length; i++) {
    const cardElement = attackCards[i];
    const cardText = cardElement.textContent || cardElement.innerText;
    if (cardText.includes(text(card).split(' ')[0])) {
      const cardRect = cardElement.getBoundingClientRect();
      startPosition = {
        left: cardRect.left + cardRect.width / 2,
        top: cardRect.top + cardRect.height / 2
      };
      console.log(`üé¨ Found attack card at index ${i}, position:`, startPosition);
      break;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞—Ç–∞–∫—É—é—â–∏—Ö, –∏—â–µ–º –≤ –∑–∞—â–∏—Ç–Ω—ã—Ö
  if (!startPosition) {
    const defenseCards = el.defenseRow.querySelectorAll('.card');
    for (let i = 0; i < defenseCards.length; i++) {
      const cardElement = defenseCards[i];
      const cardText = cardElement.textContent || cardElement.innerText;
      if (cardText.includes(text(card).split(' ')[0])) {
        const cardRect = cardElement.getBoundingClientRect();
        startPosition = {
          left: cardRect.left + cardRect.width / 2,
          top: cardRect.top + cardRect.height / 2
        };
        console.log(`üé¨ Found defense card at index ${i}, position:`, startPosition);
        break;
      }
    }
  }
  
  // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä —Å—Ç–æ–ª–∞ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
  if (!startPosition) {
    const tableRect = el.table.getBoundingClientRect();
    startPosition = {
      left: tableRect.left + tableRect.width / 2,
      top: tableRect.top + tableRect.height / 2
    };
    console.log(`üé¨ Using fallback position (center):`, startPosition);
  }
  
  // –°–æ–∑–¥–∞–µ–º –ª–µ—Ç—è—â—É—é –∫–∞—Ä—Ç—É
  const flyingCard = document.createElement('div');
  flyingCard.style.cssText = `
    position: fixed;
    left: ${startPosition.left}px;
    top: ${startPosition.top}px;
    width: 60px;
    height: 90px;
    z-index: 99999;
    pointer-events: none;
    border: 2px solid #333;
    background: white;
    border-radius: 6px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
    color: #333;
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
  const cardImg = document.createElement('img');
  cardImg.src = cardImagePath(card);
  cardImg.style.cssText = 'width: 100%; height: 100%; object-fit: contain; border-radius: 4px;';
  flyingCard.appendChild(cardImg);
  
  document.body.appendChild(flyingCard);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞
  const duration = 800;
  const startTime = performance.now();
  
  function animate(currentTime) {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);
    
    // –ö—Ä–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏–∏ (ease-out)
    const easeOut = 1 - Math.pow(1 - progress, 3);
    
    const currentLeft = startPosition.left + (targetPosition.left - startPosition.left) * easeOut;
    const currentTop = startPosition.top + (targetPosition.top - startPosition.top) * easeOut;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    const rotation = progress * 360;
    
    flyingCard.style.left = currentLeft + 'px';
    flyingCard.style.top = currentTop + 'px';
    flyingCard.style.transform = `rotate(${rotation}deg) scale(${1 - progress * 0.3})`;
    flyingCard.style.opacity = 1 - progress * 0.5;
    
    if (progress < 1) {
      requestAnimationFrame(animate);
    } else {
      // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      flyingCard.remove();
      if (onComplete) onComplete();
    }
  }
  
  requestAnimationFrame(animate);
}

function createFlyingCardToTable(card, onComplete, cardType = 'attack', targetIndex = -1){
  if (!el.playerHand || !el.table || !el.attackRow || !el.defenseRow) return;
  
  console.log(`üé¨ Creating flying card: ${text(card)}, type: ${cardType}, targetIndex: ${targetIndex}`);
  
  // Get hand position
  let handRect;
  try {
    handRect = el.playerHand.getBoundingClientRect();
  } catch (error) {
    return;
  }
  
  // Find the exact position of the card in hand
  const handCards = el.playerHand.querySelectorAll('.card');
  let cardPosition = { left: handRect.left + handRect.width/2, top: handRect.top + handRect.height/2 };
  
  // Try to find the specific card position
  for (let i = 0; i < handCards.length; i++) {
    const cardElement = handCards[i];
    const cardRect = cardElement.getBoundingClientRect();
    if (cardElement.textContent.includes(text(card).split(' ')[0])) {
      cardPosition = {
        left: cardRect.left + cardRect.width/2,
        top: cardRect.top + cardRect.height/2
      };
      break;
    }
  }
  
  // Create flying card at exact card position (real card style)
  const flyingCard = document.createElement('div');
  flyingCard.style.cssText = `
    position: fixed;
    left: ${cardPosition.left}px;
    top: ${cardPosition.top}px;
    width: 60px;
    height: 90px;
    z-index: 99999;
    pointer-events: none;
    border: 2px solid #333;
    background: white;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
    color: #000;
    transform: translate(-50%, -50%);
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
  `;
  
  // Add real card content with SVG
  flyingCard.innerHTML = `<img alt="${text(card)}" src="${cardImagePath(card)}" style="width: 100%; height: 100%; object-fit: contain;">`;
  if (card.suit === state.trumpSuit) {
    flyingCard.style.borderColor = '#ffd700';
    flyingCard.style.background = 'linear-gradient(135deg, #ffd700, #ffed4e)';
  }
  
  document.body.appendChild(flyingCard);
  
  // Calculate target position without adding card to state yet
  let targetX, targetY;
  
  if (cardType === 'attack') {
    // Calculate position for new attack card
    const currentPairs = state.table.pairs.length;
    const cardWidth = 60; // Approximate card width
    const cardHeight = 90; // Approximate card height
    const gap = 8; // Gap between cards
    
    const attackRowRect = el.attackRow.getBoundingClientRect();
    targetX = attackRowRect.left + (currentPairs * (cardWidth + gap)) + cardWidth/2;
    targetY = attackRowRect.top + cardHeight/2;
  } else if (cardType === 'defense') {
    // Calculate position for defense card
    const defenseRowRect = el.defenseRow.getBoundingClientRect();
    const cardWidth = 60;
    const cardHeight = 90;
    const gap = 8;
    
    const targetIdx = targetIndex >= 0 ? targetIndex : state.table.pairs.length - 1;
    targetX = defenseRowRect.left + (targetIdx * (cardWidth + gap)) + cardWidth/2;
    targetY = defenseRowRect.top + cardHeight/2;
  }
  
  console.log(`üéØ Calculated target position: ${targetX}, ${targetY}`);
  
  // Start animation to calculated position
  setTimeout(() => {
    console.log(`üéØ Flying to calculated position: ${targetX}, ${targetY}`);
    
    // Start animation to exact position
    setTimeout(() => {
      flyingCard.style.transition = 'all 1000ms cubic-bezier(0.25, 0.46, 0.45, 0.94)';
      flyingCard.style.left = targetX + 'px';
      flyingCard.style.top = targetY + 'px';
      flyingCard.style.transform = 'translate(-50%, -50%) scale(0.8)';
      flyingCard.style.opacity = '0';
    }, 200);
    
    // Clean up and add card to state after animation
    setTimeout(() => {
      if (flyingCard.parentNode) {
        flyingCard.parentNode.removeChild(flyingCard);
      }
      
      // Now add the card to the state and render
      if (cardType === 'attack') {
        state.table.pairs.push({ attack: card, defense: null });
        // Play sound effect for card on table
        soundManager.playCardOnTable();
      } else if (cardType === 'defense') {
        if (targetIndex >= 0 && targetIndex < state.table.pairs.length) {
          state.table.pairs[targetIndex].defense = card;
          // Play sound effect for card on table
          soundManager.playCardOnTable();
        } else {
          const currentPair = state.table.pairs[state.table.pairs.length - 1];
          if (currentPair) {
            currentPair.defense = card;
            // Play sound effect for card on table
            soundManager.playCardOnTable();
          }
        }
      }
      
      // Render the card on the table
      render();
      
      if (onComplete) {
        onComplete();
      }
    }, 1200);
  }, 100);
}

// ========================================
// üéÆ GAME LOGIC & MOVES
// ========================================

function commitAttackFromPlayer(player, selectedIds){
  const selected = player.hand.filter(c=>selectedIds.has(c.id));
  if (!selected.length) return false;
  const ranks = new Set(selected.map(c=>c.rank));
  if (ranks.size !== 1) return false;
  const totalIf = state.table.pairs.length + selected.length;
  if (totalIf > state.maxTableThisRound) return false;
  
  // Remove cards from hand first (for animation)
  player.hand = player.hand.filter(c=>!selectedIds.has(c.id));
  state.selectedAttackIndex = -1;
  ui.selected.clear();

  // Update UI to show cards removed from hand
  render();

  // Start animation first, then add cards to table after animation
  selected.forEach((card, index) => {
    setTimeout(() => {
      createFlyingCardToTable(card, () => {
        // Only set phase to defending after the first card
        if (index === 0) {
          state.phase = "defending";
        }
        render();
        
        // Continue AI after animation (only for the last card)
        if (index === selected.length - 1) {
          setTimeout(aiLoopStep, 250);
        }
      }, 'attack');
    }, 100 + (index * 300)); // Increased stagger time for better sequence
  });
  
  return true;
}

function commitDefenseFromPlayer(player, selectedId){
  if (state.selectedAttackIndex < 0) {
    console.log("‚ùå No attack target selected");
    return false;
  }
  const idx = state.selectedAttackIndex;
  const pair = state.table.pairs[idx];
  if (!pair || pair.defense) {
    console.log("‚ùå Invalid attack target or already defended");
    return false;
  }

  const card = player.hand.find(c=>c.id===selectedId);
  if (!card) {
    console.log("‚ùå Card not found in hand");
    return false;
  }
  if (!beats(card, pair.attack, state.trumpSuit)) {
    console.log("‚ùå Card cannot beat attack card");
    return false;
  }
  
  console.log(`‚úÖ Defending attack ${idx} with card ${text(card)} against ${text(pair.attack)}`);

  // Store the target index before clearing it
  const targetIndex = state.selectedAttackIndex;
  
  // Remove card from hand first (for animation)
  player.hand = player.hand.filter(x=>x.id!==card.id);
  state.selectedAttackIndex = -1;
  ui.selected.clear();

  // Update UI to show card removed from hand
  render();

  // Start animation first, then add card to table after animation
  setTimeout(() => {
    createFlyingCardToTable(card, () => {
      // Card is already added to the correct position in createFlyingCardToTable
      state.phase = state.table.pairs.every(p=>p.defense) ? "adding" : "defending";
      render();
      
      // Continue AI after animation
      setTimeout(aiLoopStep, 250);
    }, 'defense', targetIndex);
  }, 200);
  
  return true;
}

function commitAddFromPlayer(player, selectedIds){
  const selected = player.hand.filter(c=>selectedIds.has(c.id));
  if (!selected.length) return false;
  const ranks = new Set(state.table.pairs.flatMap(p=>[p.attack.rank, p.defense?.rank].filter(Boolean)));
  if (selected.some(c=>!ranks.has(c.rank))) return false;
  const totalIf = state.table.pairs.length + selected.length;
  if (totalIf > state.maxTableThisRound) return false;
  
  // Remove cards from hand first (for animation)
  player.hand = player.hand.filter(c=>!selectedIds.has(c.id));
  state.selectedAttackIndex = -1;
  ui.selected.clear();

  // Update UI to show cards removed from hand
  render();

  // Start animation first, then add cards to table after animation
  selected.forEach((card, index) => {
    setTimeout(() => {
      createFlyingCardToTable(card, () => {
        // –ü–æ—Å–ª–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ –∑–∞—â–∏—Ç—ã
        state.phase = "defending";
        render();
        
        // Continue AI after animation (only for the last card)
        if (index === selected.length - 1) {
          // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º AI
          setTimeout(() => {
            console.log('üéØ Player added cards, calling aiLoopStep');
            aiLoopStep();
          }, 100);
        }
      }, 'attack');
    }, 100 + (index * 200)); // Stagger animations
  });
  
  return true;
}

function defenderTakes(){
  const defender = state.players[state.defenderIndex];
  const all = state.table.pairs.flatMap(p=>[p.attack, p.defense].filter(Boolean));
  
  console.log('üé¨ defenderTakes called');
  console.log('üé¨ Defender:', defender.name, 'isHuman:', defender.isHuman);
  console.log('üé¨ Table pairs:', state.table.pairs);
  console.log('üé¨ Cards to take:', all.length, all.map(c => text(c)));
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  if (state.isTakingCards) {
    console.log('üé¨ Already taking cards, skipping...');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª–µ—Ç–∞ –∫–∞—Ä—Ç –∫ –∏–≥—Ä–æ–∫—É
  if (defender.isHuman && all.length > 0) {
    state.isTakingCards = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    createFlyingCardsToPlayer(all, () => {
      // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫—É
      defender.hand.push(...all);
      state.table.pairs = [];
      // –ü–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç –∞—Ç–∞–∫—É—é—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ, –∑–∞—â–∏—â–∞—é—â–∏–π—Å—è —Ç–æ–∂–µ
      // state.attackerIndex –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
      // state.defenderIndex –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
      drawUpToSix();
      startNewRound();
      checkEndgame();
      render();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      state.isTakingCards = false;
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(aiLoopStep, 300);
    });
  } else {
    // –î–ª—è –ò–ò - —Å–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª–µ—Ç–∞ –∫–∞—Ä—Ç –∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
    if (all.length > 0) {
      state.isTakingCards = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ –≤–∑—è—Ç–∏–∏ –∫–∞—Ä—Ç
      const quotes = getQuotesForTheme(state.theme);
      const takeComments = quotes.taking;
      
      const pick = arr => arr[(Math.random()*arr.length)|0];
      state.commentary = pick(takeComments);
      render();
      
      // –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      setTimeout(() => {
        createFlyingCardsToOpponent(all, () => {
          // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫—É –ò–ò
          defender.hand.push(...all);
          state.table.pairs = [];
          state.attackerIndex = (state.defenderIndex + 1) % state.players.length;
          state.defenderIndex = (state.attackerIndex + 1) % state.players.length;
          drawUpToSix();
          startNewRound();
          checkEndgame();
          render();
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
          state.isTakingCards = false;
          
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
          setTimeout(aiLoopStep, 300);
        });
      }, 1500); // 1.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —á—Ç–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
      defender.hand.push(...all);
      state.table.pairs = [];
      // –ü–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç –∞—Ç–∞–∫—É—é—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ, –∑–∞—â–∏—â–∞—é—â–∏–π—Å—è —Ç–æ–∂–µ
      // state.attackerIndex –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
      // state.defenderIndex –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
      drawUpToSix();
      startNewRound();
      checkEndgame();
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
      setTimeout(aiLoopStep, 300);
    }
  }
}

function defenderEnough(){
  console.log('üé¨ defenderEnough called');
  console.log('üé¨ Table pairs length:', state.table.pairs.length);
  console.log('üé¨ All pairs have defense:', state.table.pairs.every(p=>p.defense));
  console.log('üé¨ Table pairs:', state.table.pairs);

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  if (state.isDefenderEnoughInProgress) {
    console.log('‚ùå defenderEnough: already in progress, skipping');
    return;
  }

  if (!state.table.pairs.length || !state.table.pairs.every(p=>p.defense)) {
    console.log('‚ùå defenderEnough: condition not met, returning');
    return;
  }

  state.isDefenderEnoughInProgress = true;
  console.log('‚úÖ defenderEnough: condition met, starting animation');
  
  console.log('‚úÖ defenderEnough: condition met, proceeding with animation');
  
  // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É–ª–µ—Ç–∞ –∫–∞—Ä—Ç –≤–ª–µ–≤–æ
  const allCards = state.table.pairs.flatMap(p=>[p.attack, p.defense].filter(Boolean));
  console.log('üé¨ Cards to animate:', allCards.length, allCards.map(c => text(c)));
  
  if (allCards.length > 0) {
    console.log('üé¨ Starting simple card removal...');
    
    // Play sound effect for cards disappearing
    soundManager.playCardDisappear();
    
    // –ü—Ä–æ—Å—Ç–æ–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    const attackCards = el.attackRow.querySelectorAll('.card');
    const defenseCards = el.defenseRow.querySelectorAll('.card');
    
    console.log('üé¨ Found attack cards:', attackCards.length);
    console.log('üé¨ Found defense cards:', defenseCards.length);
    
    // –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –∏ –∑–∞–º–µ—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    const allTableCards = [...attackCards, ...defenseCards];
    console.log('üé¨ Total cards to animate:', allTableCards.length);
    
       // –ö—Ä–∞—Å–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–∞—Ä—Ç
       allTableCards.forEach((card, index) => {
         setTimeout(() => {
           console.log(`üé¨ Animating card ${index + 1}`);
           
           // –ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞ - –∫–∞—Ä—Ç–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —è—Ä–∫–æ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
           card.style.transition = 'all 0.4s ease-out';
           card.style.transform = 'scale(1.2) rotate(5deg)';
           card.style.filter = 'brightness(1.5) saturate(1.5)';
           card.style.boxShadow = '0 0 20px rgba(255, 255, 0, 0.8)';
           
           // –í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞ - –∫–∞—Ä—Ç–∞ –∏—Å—á–µ–∑–∞–µ—Ç —Å –≤—Ä–∞—â–µ–Ω–∏–µ–º
           setTimeout(() => {
             card.style.transition = 'all 0.6s ease-in';
             card.style.opacity = '0';
             card.style.transform = 'scale(0.3) rotate(180deg) translateY(-50px)';
             card.style.filter = 'brightness(2) blur(2px)';
           }, 400);
           
         }, index * 150); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
       });

       // –ß–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
       setTimeout(() => {
         console.log('üé¨ Card removal completed');
         // –û—á–∏—â–∞–µ–º —Å—Ç–æ–ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
         state.attackerIndex = state.defenderIndex;
         state.defenderIndex = (state.attackerIndex + 1) % state.players.length;
         drawUpToSix();
         startNewRound();
         checkEndgame();
         render();

         // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
         setTimeout(aiLoopStep, 300);
       }, 1500);
    
  } else {
    console.log('üé¨ No cards to remove, using fallback');
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
    state.attackerIndex = state.defenderIndex;
    state.defenderIndex = (state.attackerIndex + 1) % state.players.length;
    drawUpToSix();
    startNewRound();
    checkEndgame();
    render();
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
    setTimeout(aiLoopStep, 300);
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏
  setTimeout(() => {
    state.isDefenderEnoughInProgress = false;
    console.log('üé¨ defenderEnough: flag reset');
  }, 5000); // –ß—É—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∞–Ω–∏–º–∞—Ü–∏—è
}

function drawUpToSix(){
  const order = [];
  for (let i=0;i<state.players.length;i++) order.push((state.attackerIndex + i) % state.players.length);
  for (const idx of order){
    const p = state.players[idx];
    while (p.hand.length < 6 && state.deck.length) p.hand.push(state.deck.pop());
  }
}
function startNewRound(){
  const def = state.players[state.defenderIndex];
  state.maxTableThisRound = Math.min(6, def.hand.length);
  state.table.pairs = [];
  state.phase = "attacking";
  state.selectedAttackIndex = -1;
}

// ---------- Endgame ----------
function isDeckEmpty(){ return state.deck.length === 0; }
function anyPlayerOutOfCards(){ return state.players.some(p=>p.hand.length === 0); }
function checkEndgame(){
  if (!isDeckEmpty()) return false;
  if (!anyPlayerOutOfCards()) return false;
  const human = state.players[0];
  const humanWon = human.hand.length === 0;
  showEndgameModal(humanWon ? "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" : "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", "–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
  return true;
}
function showEndgameModal(title, message){
  // prevent duplicates
  if (document.querySelector('.modal-overlay')) return;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const humanWon = title === "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!";
  updatePlayerStats(humanWon ? 'win' : 'loss');
  
  const overlay = document.createElement('div'); overlay.className = 'modal-overlay';
  const modal = document.createElement('div'); modal.className = 'modal';
  const h2 = document.createElement('h2'); h2.textContent = title;
  const p = document.createElement('p'); p.textContent = message;
  const row = document.createElement('div'); row.className = 'row';
  const btnRestart = document.createElement('button'); btnRestart.textContent = "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë";
  btnRestart.addEventListener('click', ()=>{ overlay.remove(); restartGame(); });
  row.appendChild(btnRestart);
  modal.appendChild(h2); modal.appendChild(p); modal.appendChild(row);
  overlay.appendChild(modal);
  document.body.appendChild(overlay);
}
function restartGame(){
  ui.selected.clear();
  state.selectedAttackIndex = -1;
  state.lastCommentKey = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  state.isTakingCards = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç
  initPlayers(1);
  dealInitial();
  render();
  setTimeout(aiLoopStep, 400);
}

// ========================================
// ü§ñ AI LOGIC & OPPONENT BEHAVIOR
// ========================================

function findLowestValidAttack(hand, limit){
  console.log(`üîç findLowestValidAttack: hand=${hand.length} cards, limit=${limit}`);
  if (limit <= 0) {
    console.log(`üîç findLowestValidAttack: limit <= 0, returning null`);
    return null;
  }
  
  // –í –¥—É—Ä–∞–∫–µ –º–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ª—é–±—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –≤ –ø–µ—Ä–≤–æ–π –∞—Ç–∞–∫–µ
  // –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∞—Ç–∞–∫–∞—Ö (–ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–∏) - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∞–º–∏ —Ç–æ–≥–æ –∂–µ —Ä–∞–Ω–≥–∞, —á—Ç–æ —É–∂–µ –Ω–∞ —Å—Ç–æ–ª–µ
  const tableRanks = state.table.pairs.flatMap(p=>[p.attack.rank, p.defense?.rank].filter(Boolean));
  const isFirstAttack = state.table.pairs.length === 0;
  
  console.log(`üîç findLowestValidAttack: isFirstAttack=${isFirstAttack}, tableRanks=${JSON.stringify(tableRanks)}, trumpSuit=${state.trumpSuit}`);
  console.log(`üîç findLowestValidAttack: state.phase=${state.phase}`);
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—ã: –≤ –ø–µ—Ä–≤–æ–π –∞—Ç–∞–∫–µ - –ª—é–±—ã–µ, –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ —Ä–∞–Ω–≥–∞
  const validCards = hand.filter(card => {
    if (isFirstAttack) {
      console.log(`üîç findLowestValidAttack: ${text(card)} is first attack - valid`);
      return true;
    }
    if (tableRanks.includes(card.rank)) {
      console.log(`üîç findLowestValidAttack: ${text(card)} matches table rank - valid`);
      return true;
    }
    console.log(`üîç findLowestValidAttack: ${text(card)} doesn't match table rank - invalid`);
    return false;
  });
  
  console.log(`üîç findLowestValidAttack: valid cards:`, validCards.map(c => text(c)));
  
  if (validCards.length === 0) {
    console.log(`üîç findLowestValidAttack: no valid cards found`);
    return null;
  }
  
  const byRank = validCards.reduce((m,c)=>{ (m[c.rank]=m[c.rank]||[]).push(c); return m; }, {});
  const ranks = Object.keys(byRank);
  console.log(`üîç findLowestValidAttack: ranks found:`, ranks);
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∏–≥—Ä–∞
  const strategy = Math.random();
  let sortedRanks;
  
  if (strategy < 0.5) {
    // 50% - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä (–±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –∏–≥—Ä–∞)
    sortedRanks = ranks.sort(() => Math.random() - 0.5);
  } else if (strategy < 0.7) {
    // 20% - –≤—ã–±–∏—Ä–∞–µ–º –Ω–∏–∑–∫–∏–µ –∫–∞—Ä—Ç—ã (—ç–∫–æ–Ω–æ–º–∏–º —Å–∏–ª—å–Ω—ã–µ)
    sortedRanks = ranks.sort((a,b)=>RANK_VALUE[a]-RANK_VALUE[b]);
  } else {
    // 30% - –≤—ã–±–∏—Ä–∞–µ–º –≤—ã—Å–æ–∫–∏–µ –∫–∞—Ä—Ç—ã (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∏–≥—Ä–∞)
    sortedRanks = ranks.sort((a,b)=>RANK_VALUE[b]-RANK_VALUE[a]);
  }
  
  for (const r of sortedRanks){
    const g = byRank[r];
    if (g.length){
      // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç
      let take;
      if (strategy < 0.3) {
        // 30% - –∞—Ç–∞–∫—É–µ–º –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
        take = Math.min(g.length, limit);
      } else if (strategy < 0.6) {
        // 30% - –∞—Ç–∞–∫—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        take = Math.min(g.length, Math.max(1, Math.floor(Math.random() * Math.min(limit, g.length)) + 1));
      } else {
        // 40% - –∞—Ç–∞–∫—É–µ–º –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ–π (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)
        take = 1;
      }
      take = Math.min(take, Math.min(g.length, limit));
      console.log(`üîç findLowestValidAttack: found rank ${r} with ${g.length} cards, taking ${take} (strategy: ${strategy.toFixed(2)})`);
      return g.slice(0,take);
    }
  }
  
  console.log(`üîç findLowestValidAttack: no valid attack found`);
  return null;
}
function aiAttack(player){
  const max = state.maxTableThisRound - state.table.pairs.length;
  console.log(`ü§ñ AI Attack: max=${max}, hand=${player.hand.length} cards, phase=${state.phase}`);
  console.log(`ü§ñ AI Attack: player hand:`, player.hand.map(c => text(c)));
  
  const sel = findLowestValidAttack(player.hand, max);
  
  if (!sel) {
    console.log(`ü§ñ AI Attack: No valid attack found - this should not happen in attacking phase!`);
    return false;
  }
  
  console.log(`ü§ñ AI Attack: Selected ${sel.length} cards for attack:`, sel.map(c => text(c)));
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" –∞—Ç–∞–∫–∏ –ò–ò
  setTimeout(() => {
    for (const c of sel){
      state.table.pairs.push({ attack:c });
      player.hand = player.hand.filter(x=>x.id!==c.id);
    }
    // Play sound effect for AI placing cards
    soundManager.playCardOnTable();
    state.phase = "defending";
    render();
    checkEndgame();
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ –ò–ò –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
    setTimeout(aiLoopStep, 400);
  }, 800); // 0.8 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç–∞–∫–∏
  
  return true;
}
function aiDefense(player){
  console.log(`ü§ñ AI Defense: checking defense for ${player.name}`);
  console.log(`ü§ñ AI Defense: player hand:`, player.hand.map(c => text(c)));
  console.log(`ü§ñ AI Defense: table pairs:`, state.table.pairs.map(p => ({ attack: text(p.attack), defense: p.defense ? text(p.defense) : 'none' })));
  
  const openIdx = state.table.pairs.findIndex(p=>!p.defense);
  console.log(`ü§ñ AI Defense: openIdx = ${openIdx}`);
  
  if (openIdx < 0) {
    console.log(`ü§ñ AI Defense: no open attacks found`);
    return false;
  }
  
  const atk = state.table.pairs[openIdx].attack;
  console.log(`ü§ñ AI Defense: defending against ${text(atk)}`);
  console.log(`ü§ñ AI Defense: trump suit = ${state.trumpSuit}`);
  
  const cand = player.hand.filter(c=>beats(c, atk, state.trumpSuit));
  
  console.log(`ü§ñ AI Defense: candidate cards:`, cand.map(c => text(c)));
  
  if (!cand.length) {
    console.log(`ü§ñ AI Defense: no cards can beat ${text(atk)}`);
    return false;
  }
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—â–∏—Ç—ã: –∏–Ω–æ–≥–¥–∞ —ç–∫–æ–Ω–æ–º–∏–º –∫–æ–∑—ã—Ä–∏, –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  const strategy = Math.random();
  let selectedCard;
  
  if (strategy < 0.4) {
    // 40% - —ç–∫–æ–Ω–æ–º–∏–º –∫–æ–∑—ã—Ä–∏, –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –Ω–∏–∑–∫—É—é –∫–∞—Ä—Ç—É
    selectedCard = cand.sort((a,b)=>RANK_VALUE[a.rank]-RANK_VALUE[b.rank])[0];
  } else if (strategy < 0.7) {
    // 30% - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    selectedCard = cand[Math.floor(Math.random() * cand.length)];
  } else {
    // 30% - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–∑—ã—Ä–∏
    const trumps = cand.filter(c => c.suit === state.trumpSuit);
    if (trumps.length > 0) {
      selectedCard = trumps.sort((a,b)=>RANK_VALUE[a.rank]-RANK_VALUE[b.rank])[0];
    } else {
      selectedCard = cand.sort((a,b)=>RANK_VALUE[a.rank]-RANK_VALUE[b.rank])[0];
    }
  }
  
  console.log(`ü§ñ AI Defense: selected card ${text(selectedCard)} to defend against ${text(atk)} (strategy: ${strategy.toFixed(2)})`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è" –ò–ò
  setTimeout(() => {
    const card = selectedCard;
    state.table.pairs[openIdx].defense = card;
    player.hand = player.hand.filter(x=>x.id!==card.id);
    // Play sound effect for AI defending
    soundManager.playCardOnTable();
    state.phase = state.table.pairs.every(p=>p.defense) ? "adding" : "defending";
    console.log(`ü§ñ AI Defense: phase changed to ${state.phase}`);
    render();
    checkEndgame();
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ –ò–ò –ø–æ—Å–ª–µ –∑–∞—â–∏—Ç—ã
    setTimeout(aiLoopStep, 400);
  }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
  
  return true;
}
function aiAdd(player){
  const total = state.table.pairs.length;
  if (total >= state.maxTableThisRound) return false;
  
  // –ò–ò –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ —Ç–µ—Ö —Ä–∞–Ω–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å—Ç–æ–ª–µ
  // (–∫–∞–∫ –∞—Ç–∞–∫—É—é—â–∏–µ, —Ç–∞–∫ –∏ –∑–∞—â–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã)
  const ranks = new Set(state.table.pairs.flatMap(p=>[p.attack.rank, p.defense?.rank].filter(Boolean)));
  const opts = player.hand.filter(c=>ranks.has(c.rank));
  
  console.log(`ü§ñ AI Add check: table ranks:`, Array.from(ranks));
  console.log(`ü§ñ AI Add check: available cards:`, opts.map(c => text(c)));
  
  if (!opts.length) return false;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è "—Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è" –ò–ò
  setTimeout(() => {
    const c = opts.sort((a,b)=>RANK_VALUE[a.rank]-RANK_VALUE[b.rank])[0];
    state.table.pairs.push({ attack:c });
    player.hand = player.hand.filter(x=>x.id!==c.id);
    // Play sound effect for AI placing cards
    soundManager.playCardOnTable();
    state.phase = "defending";
    render();
    checkEndgame();
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ö–æ–¥ –ò–ò –ø–æ—Å–ª–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
    setTimeout(aiLoopStep, 400);
  }, 900); // 0.9 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
  
  return true;
}
function aiLoopStep(){
  console.log('ü§ñ aiLoopStep called');
  const attacker = state.players[state.attackerIndex];
  const defender = state.players[state.defenderIndex];
  let moved = false;
  let delay = 350; // –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
  
  console.log(`ü§ñ AI Loop: phase=${state.phase}, attacker=${attacker.name} (human:${attacker.isHuman}), defender=${defender.name} (human:${defender.isHuman})`);
  console.log(`ü§ñ AI Loop: table pairs=${state.table.pairs.length}, maxTable=${state.maxTableThisRound}`);
  console.log(`ü§ñ AI Loop: all pairs covered=${state.table.pairs.every(p=>p.defense)}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–∞–∑—É –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
  if (state.phase === "defending" && state.table.pairs.every(p => p.defense)) {
    state.phase = "adding";
    console.log(`ü§ñ AI Loop: all cards defended, switching to adding phase`);
    setTimeout(aiLoopStep, 100);
    return;
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ —Ñ–∞–∑–∞ "defending", –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É
  if (state.phase === "defending" && !state.table.pairs.every(p => p.defense)) {
    console.log(`ü§ñ AI Loop: there are undefended cards, forcing defense`);
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É AI
    if (!defender.isHuman) {
      console.log(`ü§ñ AI Loop: forcing AI defense`);
      const ok = aiDefense(defender);
      if (ok) {
        return; // aiDefense —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç aiLoopStep
      } else {
        console.log(`ü§ñ AI Loop: AI cannot defend, taking cards`);
        defenderTakes();
        moved = true;
        delay = 1000;
      }
    }
  }

  if (state.phase === "attacking" && !attacker.isHuman){
    console.log(`ü§ñ AI Loop: AI is attacker, attempting attack`);
    const attacked = aiAttack(attacker);
    if (attacked) {
      // aiAttack —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç setTimeout, –ø–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å aiLoopStep —Å—Ä–∞–∑—É
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, aiAttack —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç render() –∏ aiLoopStep
    } else {
      console.log(`‚ùå AI Attack failed - AI cannot attack! This is a bug!`);
      console.log(`ü§ñ AI state: hand=${attacker.hand.length}, phase=${state.phase}, table=${state.table.pairs.length}`);
      // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å! –ò–ò –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∞—Ç–∞–∫–∏
      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
      checkEndgame();
      return;
    }
  } else if (state.phase === "defending" && !defender.isHuman){
    console.log(`ü§ñ AI Loop: trying to defend with ${defender.name}`);
    const ok = aiDefense(defender);
    console.log(`ü§ñ AI Loop: aiDefense returned ${ok}`);
    if (!ok){ 
      console.log(`ü§ñ AI Loop: defense failed, taking cards`);
      defenderTakes(); 
      moved = true; 
      delay = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç
    } else {
      console.log(`ü§ñ AI Loop: defense successful, aiDefense will handle continuation`);
      // aiDefense —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç setTimeout, –ø–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å aiLoopStep —Å—Ä–∞–∑—É
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, aiDefense —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç render() –∏ aiLoopStep
    }
  } else if (state.phase === "adding"){
    // In adding phase, the actor is the attacker
    if (!attacker.isHuman){
      const added = aiAdd(attacker);
      if (added) {
        // aiAdd —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç setTimeout, –ø–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å aiLoopStep —Å—Ä–∞–∑—É
        return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, aiAdd —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç render() –∏ aiLoopStep
      } else {
        // –ò–ò –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å - –≥–æ–≤–æ—Ä–∏—Ç "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
        setTimeout(() => {
          // defenderEnough() —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –∏–≥—Ä—ã
          defenderEnough();
        }, 800); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è" –ò–ò
        return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ setTimeout —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω
      }
    } else {
      // Human attacker: do not auto-end. User must press Enough manually.
      // No move here; wait for user action (Add or Enough)
    }
  }

  console.log(`ü§ñ AI Loop: moved=${moved}, delay=${delay}`);
  
  if (moved){
    // render() —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–∞–º–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ò–ò —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    console.log(`ü§ñ AI Loop: scheduling next aiLoopStep in ${delay}ms`);
    checkEndgame();
    setTimeout(aiLoopStep, delay);
  } else {
    console.log(`ü§ñ AI Loop: no move made, ending aiLoopStep`);
  }
}

// ========================================
// üéØ EVENT HANDLING & USER INTERACTION
// ========================================

function bindEvents(){
  el.btnAdd.addEventListener("click", ()=>{
    const me = state.players[0];
    if (state.phase === "attacking" && state.attackerIndex === 0){
      if (!commitAttackFromPlayer(me, ui.selected)) return;
    } else if (state.phase === "defending" && state.defenderIndex === 0){
      const [only] = Array.from(ui.selected);
      if (!commitDefenseFromPlayer(me, only)) return;
    } else if (state.phase === "adding" && state.attackerIndex === 0){
      if (!commitAddFromPlayer(me, ui.selected)) return;
    }
    render(); 
    setTimeout(aiLoopStep, 250);
  });

  el.btnTake.addEventListener("click", ()=>{
    if (state.defenderIndex !== 0) return;
    defenderTakes(); render(); setTimeout(aiLoopStep, 250);
  });

  el.btnEnough.addEventListener("click", ()=>{
    console.log('üé¨ Enough button clicked!');
    console.log('üé¨ Button disabled:', el.btnEnough.disabled);
    console.log('üé¨ Current phase:', state.phase);
    console.log('üé¨ Table pairs:', state.table.pairs);
    console.log('üé¨ All pairs have defense:', state.table.pairs.every(p=>p.defense));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    el.btnEnough.style.background = 'red';
    el.btnEnough.style.transform = 'scale(0.9)';
    setTimeout(() => {
      el.btnEnough.style.background = '';
      el.btnEnough.style.transform = '';
    }, 200);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    if (el.btnEnough.disabled) {
      console.log('‚ùå Button is disabled, not proceeding');
      return;
    }
    
    // defenderEnough() —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –∏–≥—Ä—ã
    defenderEnough();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  if (el.statsButton){
    console.log('üìä Adding click listener to stats button');
    el.statsButton.addEventListener('click', function(e) {
      console.log('üìä Stats button clicked!', e);
      showAchievementsModal();
    });
  } else {
    console.error('‚ùå statsButton not found!');
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const achievementsModalClose = document.getElementById('achievementsModalClose');
  const achievementsModalOk = document.getElementById('achievementsModalOk');
  const exportStatsBtn = document.getElementById('exportStatsBtn');
  
  if (achievementsModalClose) {
    achievementsModalClose.addEventListener('click', hideAchievementsModal);
  }
  
  if (achievementsModalOk) {
    achievementsModalOk.addEventListener('click', hideAchievementsModal);
  }
  
  if (exportStatsBtn) {
    exportStatsBtn.addEventListener('click', () => {
      console.log('üíæ Exporting stats...');
      window.exportStats();
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const tabs = document.querySelectorAll('.achievements-tabs .tab');
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
      tabs.forEach(t => t.classList.remove('active'));
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∞–±—É
      tab.classList.add('active');
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const tabType = tab.dataset.tab;
      filterAchievements(tabType);
    });
  });
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
  const achievementsModal = document.getElementById('achievementsModal');
  if (achievementsModal) {
    achievementsModal.addEventListener('click', (e) => {
      if (e.target === achievementsModal) {
        hideAchievementsModal();
      }
    });
  }

  // Settings event handlers
  if (el.settingsButton){
    el.settingsButton.addEventListener('click', openSettings);
  }

  if (el.settingsClose){
    el.settingsClose.addEventListener('click', closeSettings);
  }

  // Sound effects button event handler
  const soundEffectsButton = document.getElementById('soundEffectsButton');
  if (soundEffectsButton) {
    soundEffectsButton.addEventListener('click', () => {
      soundManager.toggleSoundEffects();
    });
  }

  // Background music button event handler
  const backgroundMusicButton = document.getElementById('backgroundMusicButton');
  if (backgroundMusicButton) {
    backgroundMusicButton.addEventListener('click', () => {
      soundManager.toggleBackgroundMusic();
    });
  }

  if (el.settingsOverlay){
    el.settingsOverlay.addEventListener('click', closeSettings);
  }

  // Theme selection handlers
  const themeOptions = document.querySelectorAll('.theme-option');
  themeOptions.forEach(option => {
    option.addEventListener('click', () => {
      const themeName = option.dataset.theme;
      setTheme(themeName);
    });
  });

  // Card set selection handlers —É–¥–∞–ª–µ–Ω—ã - –∫–∞—Ä—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–µ–º–∞–º

  // Profile event handlers
  if (el.profileButton){
    console.log('üîç Profile button found, adding event listener');
    console.log('üîç Profile button element:', el.profileButton);
    console.log('üîç Profile button classList:', el.profileButton.classList);
    console.log('üîç Profile button id:', el.profileButton.id);
    
    // Make sure we're attaching to the right element
    el.profileButton.addEventListener('click', function(e) {
      console.log('üîç ======== PROFILE BUTTON CLICKED! ========');
      console.log('üîç Event:', e);
      console.log('üîç Target:', e.target);
      console.log('üîç CurrentTarget:', e.currentTarget);
      console.log('üîç About to call openProfile()...');
      openProfile();
      console.log('üîç openProfile() called!');
    });
    
    console.log('üîç Event listener added successfully!');
  } else {
    console.log('‚ùå Profile button NOT FOUND!');
    console.log('üîç el.profileButton:', el.profileButton);
  }
    
  // Debug button event listeners
  const debugBtn = document.getElementById('profileDebugBtn');
  const debugBtnMain = document.getElementById('debugButton');
  const debugModalClose = document.getElementById('debugModalClose');
  const debugModalOk = document.getElementById('debugModalOk');
  
  if (debugBtn) {
    debugBtn.addEventListener('click', showDebugModal);
  }
  if (debugBtnMain) {
    debugBtnMain.addEventListener('click', showDebugModal);
  }
  if (debugModalClose) {
    debugModalClose.addEventListener('click', hideDebugModal);
  }
  if (debugModalOk) {
    debugModalOk.addEventListener('click', hideDebugModal);
  }
  
  // Test parsing button
  const testParsingBtn = document.getElementById('testParsingBtn');
  if (testParsingBtn) {
    testParsingBtn.addEventListener('click', () => {
      const user = testTelegramDataParsing();
      if (user) {
        alert('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã!\n\n' +
              'ID: ' + user.id + '\n' +
              '–ò–º—è: ' + user.first_name + ' ' + user.last_name + '\n' +
              'Username: @' + user.username);
      } else {
        alert('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    });
  }
  
  // Version button event listeners
  const versionBtn = document.getElementById('versionButton');
  const versionModalClose = document.getElementById('versionModalClose');
  const versionModalOk = document.getElementById('versionModalOk');
  
  if (versionBtn) {
    versionBtn.addEventListener('click', showVersionModal);
  }
  if (versionModalClose) {
    versionModalClose.addEventListener('click', hideVersionModal);
  }
  if (versionModalOk) {
    versionModalOk.addEventListener('click', hideVersionModal);
  }

  if (el.profileClose){
    el.profileClose.addEventListener('click', closeProfile);
  }

  if (el.profileOverlay){
    el.profileOverlay.addEventListener('click', closeProfile);
  }

  if (el.avatarChangeBtn){
    el.avatarChangeBtn.addEventListener('click', changeAvatar);
  }

  if (el.profileSaveBtn){
    el.profileSaveBtn.addEventListener('click', saveProfile);
  }

  if (el.profileCancelBtn){
    el.profileCancelBtn.addEventListener('click', closeProfile);
  }
}

// ========================================
// üì± TELEGRAM WEBAPP INTEGRATION
// ========================================

function initTelegramWebApp() {
  if (window.Telegram?.WebApp) {
    const tg = window.Telegram.WebApp;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è Telegram MiniApp
    document.body.classList.add('telegram-miniapp');
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    tg.expand();
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª
    tg.enableClosingConfirmation();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = tg.initDataUnsafe?.user;
    if (user) {
      console.log('üë§ Telegram User:', user);
      state.telegramUser = user;
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
    tg.setHeaderColor('#2B1B17'); // –¶–≤–µ—Ç —Ç–µ–º—ã Tavern
    
    return tg;
  }
  return null;
}

function getTelegramUserId() {
  const tg = window.Telegram?.WebApp;
  if (tg?.initDataUnsafe?.user?.id) {
    return tg.initDataUnsafe.user.id.toString();
  }
  return null;
}

function setupTelegramButtons() {
  const tg = window.Telegram?.WebApp;
  if (!tg) return;
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
  tg.MainButton.setText('üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞');
  tg.MainButton.onClick(() => {
    restartGame();
    tg.MainButton.hide();
  });
  
  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"
  tg.MainButton.setText('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è');
  tg.MainButton.onClick(() => {
    shareGameResult();
  });
  
  // –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
  tg.MainButton.setText('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
  tg.MainButton.onClick(() => {
    showAchievementsModal();
  });
}

function addTelegramHaptics() {
  const tg = window.Telegram?.WebApp;
  if (!tg) return;
  
  // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
  function onGameWin() {
    tg.HapticFeedback.notificationOccurred('success');
  }
  
  // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
  function onGameLose() {
    tg.HapticFeedback.notificationOccurred('error');
  }
  
  // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫
  function onButtonClick() {
    tg.HapticFeedback.impactOccurred('light');
  }
  
  // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  // –í showEndgameModal –¥–æ–±–∞–≤–∏—Ç—å:
  if (title === "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!") {
    onGameWin();
  } else {
    onGameLose();
  }
}

function shareGameResult() {
  const tg = window.Telegram?.WebApp;
  if (!tg) return;
  
  const stats = state.playerStats;
  const message = `üéÆ –ò–≥—Ä–∞ "–î—É—Ä–∞–∫" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
  
üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: ${stats.totalGames}
‚Ä¢ –ü–æ–±–µ–¥: ${stats.wins}
‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.losses}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${Math.round((stats.wins / stats.totalGames) * 100)}%
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${stats.currentStreak}
‚Ä¢ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${stats.bestStreak}

üéØ –°—ã–≥—Ä–∞–π –∏ —Ç—ã!`;

  tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(window.location.href)}&text=${encodeURIComponent(message)}`);
}

function adaptToTelegramTheme() {
  const tg = window.Telegram?.WebApp;
  if (!tg) return;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram
  const colorScheme = tg.colorScheme;
  const themeParams = tg.themeParams;
  
  if (colorScheme === 'dark') {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    document.body.classList.add('telegram-dark');
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ Telegram
  if (themeParams.bg_color) {
    document.documentElement.style.setProperty('--telegram-bg', themeParams.bg_color);
  }
  if (themeParams.text_color) {
    document.documentElement.style.setProperty('--telegram-text', themeParams.text_color);
  }
}

// ========================================
// üöÄ RESOURCE PRELOADING SYSTEM
// ========================================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
const RESOURCE_CACHE = {
  images: new Map(),
  audio: new Map()
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getCachedImage(src) {
  if (RESOURCE_CACHE.images.has(src)) {
    return RESOURCE_CACHE.images.get(src);
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
function getCachedAudio(src) {
  if (RESOURCE_CACHE.audio.has(src)) {
    return RESOURCE_CACHE.audio.get(src);
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
async function preloadThemeCards(themeName) {
  console.log(`üé® Preloading cards for theme: ${themeName}`);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç
  const cardPaths = getCurrentThemeCards();
  
  console.log(`üì¶ Preloading ${cardPaths.length} cards for ${themeName}`);
  console.log(`üéØ Card format: ${supportsWebP ? 'WebP' : 'SVG'}`);
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã –≤ —Ñ–æ–Ω–µ
  const preloadPromises = cardPaths.map(cardPath => {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = () => {
        const basePath = cardPath.split('?')[0];
        RESOURCE_CACHE.images.set(basePath, img);
        console.log(`‚ö° Cached theme card: ${basePath}`);
        resolve();
      };
      img.onerror = () => {
        console.warn(`‚ö†Ô∏è Failed to preload: ${cardPath}`);
        resolve();
      };
      img.src = cardPath;
    });
  });
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
  await Promise.all(preloadPromises);
  console.log(`‚úÖ Theme cards preloaded: ${themeName}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
function getResourceList() {
  return {
    // –ö–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
    cards: getCurrentThemeCards(),
  
  // –ò–∫–æ–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º
  icons: [
    // Casino icons
    './themes/casino/icons/attack.svg',
    './themes/casino/icons/take.svg', 
    './themes/casino/icons/enough.svg',
    './themes/casino/icons/options.svg',
    './themes/casino/icons/person/base.jpg',
    './themes/casino/icons/person/happy.jpg',
    './themes/casino/icons/person/sad.jpg',
    './themes/casino/icons/person/thinks.jpg',
    // Tavern icons
    './themes/tavern/icons/attack.svg',
    './themes/tavern/icons/take.svg',
    './themes/tavern/icons/enough.svg', 
    './themes/tavern/icons/options.svg',
    './themes/tavern/icons/person/base.jpg',
    './themes/tavern/icons/person/happy.jpg',
    './themes/tavern/icons/person/sad.jpg',
    './themes/tavern/icons/person/thinks.jpg',
    './themes/tavern/icons/buttons/attack.jpg',
    './themes/tavern/icons/buttons/take.jpg',
    './themes/tavern/icons/buttons/enough.jpg',
    // Underground icons
    './themes/underground/icons/attack.svg',
    './themes/underground/icons/take.svg',
    './themes/underground/icons/enough.svg',
    './themes/underground/icons/options.svg',
    './themes/underground/icons/person/base.jpg',
    './themes/underground/icons/person/happy.jpg',
    './themes/underground/icons/person/sad.jpg',
    './themes/underground/icons/person/thinks.jpg'
  ],
  
  // –¢–µ–∫—Å—Ç—É—Ä—ã
  textures: [
    './themes/casino/textures/table.jpg',
    './themes/casino/textures/wall.jpg',
    './themes/tavern/textures/table.jpg',
    './themes/tavern/textures/wall.jpg',
    './themes/tavern/textures/opponent_panel.jpg',
    './themes/underground/textures/table.jpg',
    './themes/underground/textures/wall.jpg',
    './themes/underground/textures/opponent_panel.jpg'
  ],
  
  // –ó–≤—É–∫–∏
  sounds: [
    './sounds/casino/card_on_table.mp3',
    './sounds/casino/card_disappear.mp3',
    './sounds/casino/background_music.mp3',
    './sounds/tavern/card_on_table.mp3',
    './sounds/tavern/card_disappear.mp3',
    './sounds/tavern/background_music.mp3',
    './sounds/underground/card_on_table.mp3',
    './sounds/underground/card_disappear.mp3',
    './sounds/underground/background_music.mp3'
  ],
  
  // –õ–æ–≥–æ—Ç–∏–ø—ã
  logos: [
    './logo/durak.png',
    './themes/casino/icons/logo/durak.png',
    './themes/tavern/icons/logo/durak.png',
    './themes/underground/icons/logo/durak.png'
  ]
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
function getCardFileName(index) {
  const ranks = ['6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace'];
  const suits = ['clubs', 'diamonds', 'hearts', 'spades'];
  const rank = ranks[Math.floor(index / 4)];
  const suit = suits[index % 4];
  return `${rank}_of_${suit}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
function getCurrentThemeCards() {
  const currentTheme = state.theme || 'casino';
  console.log(`üé® getCurrentThemeCards: theme=${currentTheme}, supportsWebP=${supportsWebP}`);
  
  // –ï—Å–ª–∏ WebP –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∑–∞–≥—Ä—É–∂–∞–µ–º WebP –∫–∞—Ä—Ç—ã
  if (supportsWebP) {
    const webpCards = Array.from({length: 36}, (_, i) => 
      `./themes/${currentTheme}/cards/WEBP_cards/${getCardFileName(i)}.webp`
    );
    console.log(`üñºÔ∏è WebP cards generated:`, webpCards.slice(0, 3));
    return webpCards;
  }
  
  // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º SVG –∫–∞—Ä—Ç—ã
  const svgCards = Array.from({length: 36}, (_, i) => 
    `./themes/${currentTheme}/cards/SVG-cards-1.3/${getCardFileName(i)}.svg`
  );
  console.log(`üñºÔ∏è SVG cards generated:`, svgCards.slice(0, 3));
  return svgCards;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
async function preloadResources() {
  console.log('üöÄ Starting resource preloading...');
  
  const progressFill = document.getElementById('loadingProgressFill');
  const progressText = document.getElementById('loadingProgressText');
  
  let totalResources = 0;
  let loadedResources = 0;
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
  const RESOURCE_LIST = getResourceList();
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤
  Object.values(RESOURCE_LIST).forEach(category => {
    totalResources += category.length;
  });
  
  console.log(`üìä Total resources to load: ${totalResources}`);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingScreen = document.getElementById('loadingScreen');
  const app = document.getElementById('app');
  
  if (loadingScreen) {
    loadingScreen.style.display = 'flex';
    loadingScreen.classList.remove('hidden');
  }
  if (app) {
    app.style.display = 'none';
  }
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  function updateProgress(resourceName) {
    loadedResources++;
    const progress = Math.round((loadedResources / totalResources) * 100);
    progressFill.style.width = `${progress}%`;
    progressText.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ ${resourceName}... (${loadedResources}/${totalResources})`;
    console.log(`üì¶ Loaded: ${resourceName} (${progress}%)`);
  }
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  function preloadImage(src) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –ø–æ –±–∞–∑–æ–≤–æ–º—É –ø—É—Ç–∏ (–±–µ–∑ timestamp)
        const basePath = src.split('?')[0];
        RESOURCE_CACHE.images.set(basePath, img);
        console.log(`üì¶ Cached image: ${basePath}`);
        resolve(src);
      };
      img.onerror = () => {
        console.warn(`‚ö†Ô∏è Failed to load image: ${src}`);
        resolve(src); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
      };
      // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
      const timestamp = Date.now();
      const separator = src.includes('?') ? '&' : '?';
      img.src = `${src}${separator}v=${timestamp}`;
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ
  function preloadAudio(src) {
    return new Promise((resolve, reject) => {
      const audio = new Audio();
      audio.oncanplaythrough = () => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        RESOURCE_CACHE.audio.set(src, audio);
        console.log(`üì¶ Cached audio: ${src}`);
        resolve(src);
      };
      audio.onerror = () => {
        console.warn(`‚ö†Ô∏è Failed to load audio: ${src}`);
        resolve(src); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
      };
      // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
      const timestamp = Date.now();
      const separator = src.includes('?') ? '&' : '?';
      audio.src = `${src}${separator}v=${timestamp}`;
    });
  }
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã
    progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç...';
    for (const cardPath of RESOURCE_LIST.cards) {
      await preloadImage(cardPath);
      updateProgress('–∫–∞—Ä—Ç—ã');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏
    progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫...';
    for (const iconPath of RESOURCE_LIST.icons) {
      await preloadImage(iconPath);
      updateProgress('–∏–∫–æ–Ω–∫–∏');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
    progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä...';
    for (const texturePath of RESOURCE_LIST.textures) {
      await preloadImage(texturePath);
      updateProgress('—Ç–µ–∫—Å—Ç—É—Ä—ã');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã
    progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤...';
    for (const logoPath of RESOURCE_LIST.logos) {
      await preloadImage(logoPath);
      updateProgress('–ª–æ–≥–æ—Ç–∏–ø—ã');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–≤—É–∫–∏ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É)
    progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤...';
    const audioPromises = RESOURCE_LIST.sounds.map(soundPath => 
      preloadAudio(soundPath).then(() => updateProgress('–∑–≤—É–∫–∏'))
    );
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–æ–≤
    await Promise.all(audioPromises);
    
    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
    console.log('‚úÖ All resources preloaded successfully!');
    
    return true;
  } catch (error) {
    console.error('‚ùå Error during resource preloading:', error);
    progressText.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤';
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoadingScreen() {
  const loadingScreen = document.getElementById('loadingScreen');
  const app = document.getElementById('app');
  
  loadingScreen.classList.add('hidden');
  app.style.display = 'block';
  
  // –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ DOM —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
  setTimeout(() => {
    loadingScreen.remove();
  }, 500);
}

// ========================================
// üöÄ MAIN APPLICATION ENTRY POINT
// ========================================

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏)
function initializeGame() {
  console.log('üéÆ Initializing game after preloading...');
  
  // Initialize Telegram WebApp
  const tg = initTelegramWebApp();
  if (tg) {
    console.log('üì± Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    setupTelegramButtons();
    adaptToTelegramTheme();
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
  loadPlayerStats();
  // load persisted theme
  try { 
    const savedTheme = localStorage.getItem('theme'); 
    const validThemes = ['casino', 'underground', 'tavern'];
    if (savedTheme && validThemes.includes(savedTheme)) {
      state.theme = savedTheme;
    } else {
      state.theme = 'casino'; // default theme
    }
  } catch(e){
    state.theme = 'casino'; // default theme
  }
  // load persisted card set
  try { const savedCardSet = localStorage.getItem('cardSet'); if (savedCardSet) state.cardSet = savedCardSet; } catch(e){}
  // load persisted user profile
  try { 
    const savedProfile = localStorage.getItem('userProfile'); 
    if (savedProfile) {
      const profile = JSON.parse(savedProfile);
      state.userProfile.nickname = profile.nickname || "–ò–≥—Ä–æ–∫";
      state.userProfile.avatar = profile.avatar || "üë§";
    }
  } catch(e){}
  
  console.log('üë• Initializing players...');
  initPlayers(1); // 1v1
  console.log('üé≤ Dealing initial cards...');
  dealInitial();
  console.log('üîó Binding events...');
  bindEvents();
  
  // Apply saved theme
  console.log('üé® Applying theme:', state.theme);
  setTheme(state.theme);
  
  // Card set —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–º–µ, –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å
  console.log('üÉè Card set is now tied to theme');
  
  // Start background music after user interaction
  // Note: Browsers require user interaction before playing audio
  document.addEventListener('click', () => {
    if (!soundManager.backgroundMusicMuted && (!soundManager.backgroundMusic.played || soundManager.backgroundMusic.played.length === 0)) {
      console.log('Starting background music after user interaction...');
      soundManager.backgroundMusic.play().catch(e => console.log('Background music play failed:', e));
    }
  }, { once: true });
  
  render();
  
  // Initialize profile button with avatar
  if (el.profileButton) {
    el.profileButton.textContent = state.userProfile.avatar;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π
async function main(){
  console.log('üöÄ main() called with preloading');
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingScreen = document.getElementById('loadingScreen');
  const app = document.getElementById('app');
  
  if (loadingScreen) {
    loadingScreen.style.display = 'flex';
    loadingScreen.classList.remove('hidden');
    console.log('üì± Loading screen shown');
  }
  if (app) {
    app.style.display = 'none';
    console.log('üéÆ Game hidden');
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM —Å—Å—ã–ª–∫–∏
  initDomRefs();
  console.log('üîó DOM refs initialized');
  
  try {
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
    console.log('üì¶ Starting resource preloading...');
    const preloadSuccess = await preloadResources();
    
    if (preloadSuccess) {
      console.log('‚úÖ Preloading completed successfully');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É
      hideLoadingScreen();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
      initializeGame();
      
      console.log('üéÆ Game initialized successfully!');
    } else {
      console.warn('‚ö†Ô∏è Preloading had issues, but continuing...');
      hideLoadingScreen();
      initializeGame();
    }
  } catch (error) {
    console.error('‚ùå Error during preloading:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É
    hideLoadingScreen();
    initializeGame();
  }
  
  setTimeout(aiLoopStep, 800);
  
  // Initialize Telegram integration
  if (isTelegram) {
    initializeTelegramIntegration();
  }
  
  // CRITICAL DEBUG: Test if openProfile is accessible
  console.log('üîç ======== TESTING openProfile ACCESSIBILITY ========');
  console.log('üîç typeof openProfile:', typeof openProfile);
  console.log('üîç typeof window.manualOpenProfile:', typeof window.manualOpenProfile);
  console.log('üîç window.PROFILE_OPENED_COUNT:', window.PROFILE_OPENED_COUNT || 0);
  console.log('üîç el.profileButton:', el.profileButton);
  
  // Make openProfile globally accessible for testing
  window.testOpenProfile = function() {
    console.log('üîç TEST: Calling openProfile manually...');
    openProfile();
  };
  console.log('üîç openProfile test function available as window.testOpenProfile()');
  
  // Make stats management globally accessible for testing
  window.clearStats = async function() {
    console.log('üóëÔ∏è Clearing stats...');
    try {
      await StatsAPI.clearStats();
      state.playerStats = {
        totalGames: 0,
        wins: 0,
        losses: 0,
        currentStreak: 0,
        bestStreak: 0,
        lastResult: null
      };
      console.log('‚úÖ Stats cleared successfully!');
      return true;
    } catch (error) {
      console.error('‚ùå Error clearing stats:', error);
      return false;
    }
  };
  
  window.showStats = function() {
    console.log('üìä Current stats:', state.playerStats);
    return state.playerStats;
  };
  
  window.showAchievements = function() {
    console.log('üèÜ Achievements:', state.playerStats.achievements);
    console.log('üèÜ Unlocked:', state.playerStats.achievements.unlocked);
    console.log('üèÜ Points:', state.playerStats.achievements.points);
    console.log('üèÜ Level:', state.playerStats.achievements.level);
    console.log('üèÜ Title:', state.playerStats.achievements.title);
    return state.playerStats.achievements;
  };
  
  window.testAchievements = function() {
    console.log('üß™ Testing achievements...');
    const newAchievements = AchievementSystem.checkAchievements(state.playerStats);
    if (newAchievements.length > 0) {
      showAchievementNotification(newAchievements);
      console.log('üèÜ New achievements:', newAchievements.map(a => a.name));
    } else {
      console.log('‚ùå No new achievements');
    }
    return newAchievements;
  };
  
  window.testStatsButton = function() {
    console.log('üß™ Testing stats button...');
    const button = document.getElementById('statsButton');
    console.log('üìä Button element:', button);
    if (button) {
      console.log('üìä Button found, triggering click...');
      button.click();
    } else {
      console.error('‚ùå Button not found!');
    }
  };
  
  window.exportStats = function() {
    const stats = state.playerStats;
    const json = JSON.stringify(stats, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `durak-stats-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
    console.log('‚úÖ Stats exported to file');
  };
  
  window.importStats = function(jsonString) {
    try {
      const stats = JSON.parse(jsonString);
      state.playerStats = stats;
      StatsAPI.saveStats(stats);
      console.log('‚úÖ Stats imported successfully:', stats);
      return true;
    } catch (error) {
      console.error('‚ùå Error importing stats:', error);
      return false;
    }
  };
  
  console.log('üìä Stats management functions available:');
  console.log('  - window.showStats() - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  console.log('  - window.showAchievements() - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
  console.log('  - window.testAchievements() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
  console.log('  - window.testStatsButton() - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  console.log('  - window.exportStats() - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ JSON —Ñ–∞–π–ª');
  console.log('  - window.importStats(json) - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ JSON');
  console.log('  - window.clearStats() - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  console.log('üîç ========================================');
  
  // AUTOMATIC TEST: Disabled (feature working correctly)
  // setTimeout(function() {
  //   console.log('üîç ======== AUTOMATIC TEST: Calling openProfile() ========');
  //   try {
  //     openProfile();
  //     console.log('‚úÖ openProfile() called successfully!');
  //     
  //     // Close profile after 2 seconds
  //     setTimeout(function() {
  //       console.log('üîç Closing profile automatically...');
  //       closeProfile();
  //     }, 2000);
  //   } catch (error) {
  //     console.error('‚ùå Error calling openProfile():', error);
  //   }
  // }, 3000);
}

// ========================================
// üì± TELEGRAM INTEGRATION FUNCTIONS
// ========================================

function initializeTelegramIntegration() {
  if (!tg) return;
  
  // Get user info from Telegram
  const user = tg.initDataUnsafe?.user;
  if (user) {
    // Set user profile from Telegram
    state.userProfile.nickname = user.first_name || "–ò–≥—Ä–æ–∫";
    if (user.last_name) {
      state.userProfile.nickname += ` ${user.last_name}`;
    }
    
    // Update profile button
    if (el.profileButton) {
      el.profileButton.textContent = "üë§";
    }
    
    // Update user avatar in profile modal
    if (el.userAvatar) {
      el.userAvatar.textContent = "üë§";
    }
    if (el.userNickname) {
      el.userNickname.value = state.userProfile.nickname;
    }
    
    console.log('üë§ Telegram user loaded:', state.userProfile.nickname);
  }
  
  
  // Handle game events
  setupTelegramGameEvents();
}

function setupTelegramGameEvents() {
  if (!tg) return;
  
  // Send game start event
  tg.sendData(JSON.stringify({
    type: 'game_start',
    timestamp: Date.now()
  }));
  
  // Handle game end
  const originalShowGameEnd = showGameEnd;
  showGameEnd = function(winner) {
    originalShowGameEnd(winner);
    
    // Send game end event to Telegram
    tg.sendData(JSON.stringify({
      type: 'game_end',
      winner: winner,
      timestamp: Date.now()
    }));
    
    // Show Telegram haptic feedback
    tg.HapticFeedback.impactOccurred('medium');
  };
}

// Telegram-specific functions
function showTelegramAlert(message) {
  if (tg && tg.showAlert) {
    tg.showAlert(message);
  } else {
    alert(message);
  }
}

function showTelegramConfirm(message, callback) {
  if (tg && tg.showConfirm) {
    tg.showConfirm(message, callback);
  } else {
    if (confirm(message)) {
      callback(true);
    }
  }
}

function sendTelegramHaptic(type = 'light') {
  if (tg && tg.HapticFeedback) {
    tg.HapticFeedback.impactOccurred(type);
  }
}

window.addEventListener("load", main);
